// Code generated by go-swagger; DO NOT EDIT.

package data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jimdickinson/stargoat/internal/generated/models"
)

// CreateRowReader is a Reader for the CreateRow structure.
type CreateRowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateRowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateRowCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateRowBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateRowUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateRowConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateRowInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateRowCreated creates a CreateRowCreated with default headers values
func NewCreateRowCreated() *CreateRowCreated {
	return &CreateRowCreated{}
}

/*CreateRowCreated handles this case with default header values.

resource created
*/
type CreateRowCreated struct {
	Payload map[string]map[string]interface{}
}

func (o *CreateRowCreated) Error() string {
	return fmt.Sprintf("[POST /v2/keyspaces/{keyspaceName}/{tableName}][%d] createRowCreated  %+v", 201, o.Payload)
}

func (o *CreateRowCreated) GetPayload() map[string]map[string]interface{} {
	return o.Payload
}

func (o *CreateRowCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRowBadRequest creates a CreateRowBadRequest with default headers values
func NewCreateRowBadRequest() *CreateRowBadRequest {
	return &CreateRowBadRequest{}
}

/*CreateRowBadRequest handles this case with default header values.

Bad Request
*/
type CreateRowBadRequest struct {
	Payload *models.Error
}

func (o *CreateRowBadRequest) Error() string {
	return fmt.Sprintf("[POST /v2/keyspaces/{keyspaceName}/{tableName}][%d] createRowBadRequest  %+v", 400, o.Payload)
}

func (o *CreateRowBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateRowBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRowUnauthorized creates a CreateRowUnauthorized with default headers values
func NewCreateRowUnauthorized() *CreateRowUnauthorized {
	return &CreateRowUnauthorized{}
}

/*CreateRowUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateRowUnauthorized struct {
	Payload *models.Error
}

func (o *CreateRowUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v2/keyspaces/{keyspaceName}/{tableName}][%d] createRowUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateRowUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateRowUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRowConflict creates a CreateRowConflict with default headers values
func NewCreateRowConflict() *CreateRowConflict {
	return &CreateRowConflict{}
}

/*CreateRowConflict handles this case with default header values.

Conflict
*/
type CreateRowConflict struct {
	Payload *models.Error
}

func (o *CreateRowConflict) Error() string {
	return fmt.Sprintf("[POST /v2/keyspaces/{keyspaceName}/{tableName}][%d] createRowConflict  %+v", 409, o.Payload)
}

func (o *CreateRowConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateRowConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRowInternalServerError creates a CreateRowInternalServerError with default headers values
func NewCreateRowInternalServerError() *CreateRowInternalServerError {
	return &CreateRowInternalServerError{}
}

/*CreateRowInternalServerError handles this case with default header values.

Internal server error
*/
type CreateRowInternalServerError struct {
	Payload *models.Error
}

func (o *CreateRowInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v2/keyspaces/{keyspaceName}/{tableName}][%d] createRowInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateRowInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateRowInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
