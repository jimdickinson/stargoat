// Code generated by go-swagger; DO NOT EDIT.

package data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAllRowsParams creates a new GetAllRowsParams object
// with the default values initialized.
func NewGetAllRowsParams() *GetAllRowsParams {
	var ()
	return &GetAllRowsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllRowsParamsWithTimeout creates a new GetAllRowsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAllRowsParamsWithTimeout(timeout time.Duration) *GetAllRowsParams {
	var ()
	return &GetAllRowsParams{

		timeout: timeout,
	}
}

// NewGetAllRowsParamsWithContext creates a new GetAllRowsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAllRowsParamsWithContext(ctx context.Context) *GetAllRowsParams {
	var ()
	return &GetAllRowsParams{

		Context: ctx,
	}
}

// NewGetAllRowsParamsWithHTTPClient creates a new GetAllRowsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAllRowsParamsWithHTTPClient(client *http.Client) *GetAllRowsParams {
	var ()
	return &GetAllRowsParams{
		HTTPClient: client,
	}
}

/*GetAllRowsParams contains all the parameters to send to the API endpoint
for the get all rows operation typically these are written to a http.Request
*/
type GetAllRowsParams struct {

	/*XCassandraToken
	  The token returned from the authorization endpoint. Use this token in each request.

	*/
	XCassandraToken string
	/*KeyspaceName
	  Name of the keyspace to use for the request.

	*/
	KeyspaceName string
	/*PageSize
	  Restrict the number of returned items

	*/
	PageSize *int32
	/*PageState
	  Move the cursor to a particular result

	*/
	PageState *string
	/*TableName
	  Name of the table to use for the request.

	*/
	TableName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get all rows params
func (o *GetAllRowsParams) WithTimeout(timeout time.Duration) *GetAllRowsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all rows params
func (o *GetAllRowsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all rows params
func (o *GetAllRowsParams) WithContext(ctx context.Context) *GetAllRowsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all rows params
func (o *GetAllRowsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all rows params
func (o *GetAllRowsParams) WithHTTPClient(client *http.Client) *GetAllRowsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all rows params
func (o *GetAllRowsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXCassandraToken adds the xCassandraToken to the get all rows params
func (o *GetAllRowsParams) WithXCassandraToken(xCassandraToken string) *GetAllRowsParams {
	o.SetXCassandraToken(xCassandraToken)
	return o
}

// SetXCassandraToken adds the xCassandraToken to the get all rows params
func (o *GetAllRowsParams) SetXCassandraToken(xCassandraToken string) {
	o.XCassandraToken = xCassandraToken
}

// WithKeyspaceName adds the keyspaceName to the get all rows params
func (o *GetAllRowsParams) WithKeyspaceName(keyspaceName string) *GetAllRowsParams {
	o.SetKeyspaceName(keyspaceName)
	return o
}

// SetKeyspaceName adds the keyspaceName to the get all rows params
func (o *GetAllRowsParams) SetKeyspaceName(keyspaceName string) {
	o.KeyspaceName = keyspaceName
}

// WithPageSize adds the pageSize to the get all rows params
func (o *GetAllRowsParams) WithPageSize(pageSize *int32) *GetAllRowsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get all rows params
func (o *GetAllRowsParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithPageState adds the pageState to the get all rows params
func (o *GetAllRowsParams) WithPageState(pageState *string) *GetAllRowsParams {
	o.SetPageState(pageState)
	return o
}

// SetPageState adds the pageState to the get all rows params
func (o *GetAllRowsParams) SetPageState(pageState *string) {
	o.PageState = pageState
}

// WithTableName adds the tableName to the get all rows params
func (o *GetAllRowsParams) WithTableName(tableName string) *GetAllRowsParams {
	o.SetTableName(tableName)
	return o
}

// SetTableName adds the tableName to the get all rows params
func (o *GetAllRowsParams) SetTableName(tableName string) {
	o.TableName = tableName
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllRowsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-Cassandra-Token
	if err := r.SetHeaderParam("X-Cassandra-Token", o.XCassandraToken); err != nil {
		return err
	}

	// path param keyspaceName
	if err := r.SetPathParam("keyspaceName", o.KeyspaceName); err != nil {
		return err
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.PageState != nil {

		// query param pageState
		var qrPageState string
		if o.PageState != nil {
			qrPageState = *o.PageState
		}
		qPageState := qrPageState
		if qPageState != "" {
			if err := r.SetQueryParam("pageState", qPageState); err != nil {
				return err
			}
		}

	}

	// path param tableName
	if err := r.SetPathParam("tableName", o.TableName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
