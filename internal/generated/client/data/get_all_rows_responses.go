// Code generated by go-swagger; DO NOT EDIT.

package data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jimdickinson/stargoat/internal/generated/models"
)

// GetAllRowsReader is a Reader for the GetAllRows structure.
type GetAllRowsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllRowsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllRowsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAllRowsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAllRowsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllRowsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllRowsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAllRowsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAllRowsOK creates a GetAllRowsOK with default headers values
func NewGetAllRowsOK() *GetAllRowsOK {
	return &GetAllRowsOK{}
}

/*GetAllRowsOK handles this case with default header values.

OK
*/
type GetAllRowsOK struct {
	Payload *models.Rows
}

func (o *GetAllRowsOK) Error() string {
	return fmt.Sprintf("[GET /v1/keyspaces/{keyspaceName}/tables/{tableName}/rows][%d] getAllRowsOK  %+v", 200, o.Payload)
}

func (o *GetAllRowsOK) GetPayload() *models.Rows {
	return o.Payload
}

func (o *GetAllRowsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Rows)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllRowsBadRequest creates a GetAllRowsBadRequest with default headers values
func NewGetAllRowsBadRequest() *GetAllRowsBadRequest {
	return &GetAllRowsBadRequest{}
}

/*GetAllRowsBadRequest handles this case with default header values.

Bad request
*/
type GetAllRowsBadRequest struct {
	Payload *models.Error
}

func (o *GetAllRowsBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/keyspaces/{keyspaceName}/tables/{tableName}/rows][%d] getAllRowsBadRequest  %+v", 400, o.Payload)
}

func (o *GetAllRowsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAllRowsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllRowsUnauthorized creates a GetAllRowsUnauthorized with default headers values
func NewGetAllRowsUnauthorized() *GetAllRowsUnauthorized {
	return &GetAllRowsUnauthorized{}
}

/*GetAllRowsUnauthorized handles this case with default header values.

Unauthorized
*/
type GetAllRowsUnauthorized struct {
	Payload *models.Error
}

func (o *GetAllRowsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/keyspaces/{keyspaceName}/tables/{tableName}/rows][%d] getAllRowsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAllRowsUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAllRowsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllRowsForbidden creates a GetAllRowsForbidden with default headers values
func NewGetAllRowsForbidden() *GetAllRowsForbidden {
	return &GetAllRowsForbidden{}
}

/*GetAllRowsForbidden handles this case with default header values.

Forbidden
*/
type GetAllRowsForbidden struct {
	Payload *models.Error
}

func (o *GetAllRowsForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/keyspaces/{keyspaceName}/tables/{tableName}/rows][%d] getAllRowsForbidden  %+v", 403, o.Payload)
}

func (o *GetAllRowsForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAllRowsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllRowsNotFound creates a GetAllRowsNotFound with default headers values
func NewGetAllRowsNotFound() *GetAllRowsNotFound {
	return &GetAllRowsNotFound{}
}

/*GetAllRowsNotFound handles this case with default header values.

Not Found
*/
type GetAllRowsNotFound struct {
	Payload *models.Error
}

func (o *GetAllRowsNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/keyspaces/{keyspaceName}/tables/{tableName}/rows][%d] getAllRowsNotFound  %+v", 404, o.Payload)
}

func (o *GetAllRowsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAllRowsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllRowsInternalServerError creates a GetAllRowsInternalServerError with default headers values
func NewGetAllRowsInternalServerError() *GetAllRowsInternalServerError {
	return &GetAllRowsInternalServerError{}
}

/*GetAllRowsInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetAllRowsInternalServerError struct {
	Payload *models.Error
}

func (o *GetAllRowsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/keyspaces/{keyspaceName}/tables/{tableName}/rows][%d] getAllRowsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAllRowsInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAllRowsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
