// Code generated by go-swagger; DO NOT EDIT.

package documents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jimdickinson/stargoat/internal/generated/models"
)

// CreateNamespaceReader is a Reader for the CreateNamespace structure.
type CreateNamespaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateNamespaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateNamespaceCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateNamespaceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateNamespaceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateNamespaceConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateNamespaceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateNamespaceCreated creates a CreateNamespaceCreated with default headers values
func NewCreateNamespaceCreated() *CreateNamespaceCreated {
	return &CreateNamespaceCreated{}
}

/*CreateNamespaceCreated handles this case with default header values.

Created
*/
type CreateNamespaceCreated struct {
	Payload map[string]interface{}
}

func (o *CreateNamespaceCreated) Error() string {
	return fmt.Sprintf("[POST /v2/schemas/namespaces][%d] createNamespaceCreated  %+v", 201, o.Payload)
}

func (o *CreateNamespaceCreated) GetPayload() map[string]interface{} {
	return o.Payload
}

func (o *CreateNamespaceCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNamespaceBadRequest creates a CreateNamespaceBadRequest with default headers values
func NewCreateNamespaceBadRequest() *CreateNamespaceBadRequest {
	return &CreateNamespaceBadRequest{}
}

/*CreateNamespaceBadRequest handles this case with default header values.

Bad Request
*/
type CreateNamespaceBadRequest struct {
}

func (o *CreateNamespaceBadRequest) Error() string {
	return fmt.Sprintf("[POST /v2/schemas/namespaces][%d] createNamespaceBadRequest ", 400)
}

func (o *CreateNamespaceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateNamespaceUnauthorized creates a CreateNamespaceUnauthorized with default headers values
func NewCreateNamespaceUnauthorized() *CreateNamespaceUnauthorized {
	return &CreateNamespaceUnauthorized{}
}

/*CreateNamespaceUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateNamespaceUnauthorized struct {
}

func (o *CreateNamespaceUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v2/schemas/namespaces][%d] createNamespaceUnauthorized ", 401)
}

func (o *CreateNamespaceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateNamespaceConflict creates a CreateNamespaceConflict with default headers values
func NewCreateNamespaceConflict() *CreateNamespaceConflict {
	return &CreateNamespaceConflict{}
}

/*CreateNamespaceConflict handles this case with default header values.

Conflict
*/
type CreateNamespaceConflict struct {
}

func (o *CreateNamespaceConflict) Error() string {
	return fmt.Sprintf("[POST /v2/schemas/namespaces][%d] createNamespaceConflict ", 409)
}

func (o *CreateNamespaceConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateNamespaceInternalServerError creates a CreateNamespaceInternalServerError with default headers values
func NewCreateNamespaceInternalServerError() *CreateNamespaceInternalServerError {
	return &CreateNamespaceInternalServerError{}
}

/*CreateNamespaceInternalServerError handles this case with default header values.

Internal server error
*/
type CreateNamespaceInternalServerError struct {
	Payload *models.Error
}

func (o *CreateNamespaceInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v2/schemas/namespaces][%d] createNamespaceInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateNamespaceInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateNamespaceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
