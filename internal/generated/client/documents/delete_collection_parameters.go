// Code generated by go-swagger; DO NOT EDIT.

package documents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteCollectionParams creates a new DeleteCollectionParams object
// with the default values initialized.
func NewDeleteCollectionParams() *DeleteCollectionParams {
	var ()
	return &DeleteCollectionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteCollectionParamsWithTimeout creates a new DeleteCollectionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteCollectionParamsWithTimeout(timeout time.Duration) *DeleteCollectionParams {
	var ()
	return &DeleteCollectionParams{

		timeout: timeout,
	}
}

// NewDeleteCollectionParamsWithContext creates a new DeleteCollectionParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteCollectionParamsWithContext(ctx context.Context) *DeleteCollectionParams {
	var ()
	return &DeleteCollectionParams{

		Context: ctx,
	}
}

// NewDeleteCollectionParamsWithHTTPClient creates a new DeleteCollectionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteCollectionParamsWithHTTPClient(client *http.Client) *DeleteCollectionParams {
	var ()
	return &DeleteCollectionParams{
		HTTPClient: client,
	}
}

/*DeleteCollectionParams contains all the parameters to send to the API endpoint
for the delete collection operation typically these are written to a http.Request
*/
type DeleteCollectionParams struct {

	/*XCassandraToken
	  The token returned from the authorization endpoint. Use this token in each request.

	*/
	XCassandraToken string
	/*CollectionID
	  the collection to delete

	*/
	CollectionID string
	/*NamespaceID
	  the namespace containing the collection to delete

	*/
	NamespaceID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete collection params
func (o *DeleteCollectionParams) WithTimeout(timeout time.Duration) *DeleteCollectionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete collection params
func (o *DeleteCollectionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete collection params
func (o *DeleteCollectionParams) WithContext(ctx context.Context) *DeleteCollectionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete collection params
func (o *DeleteCollectionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete collection params
func (o *DeleteCollectionParams) WithHTTPClient(client *http.Client) *DeleteCollectionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete collection params
func (o *DeleteCollectionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXCassandraToken adds the xCassandraToken to the delete collection params
func (o *DeleteCollectionParams) WithXCassandraToken(xCassandraToken string) *DeleteCollectionParams {
	o.SetXCassandraToken(xCassandraToken)
	return o
}

// SetXCassandraToken adds the xCassandraToken to the delete collection params
func (o *DeleteCollectionParams) SetXCassandraToken(xCassandraToken string) {
	o.XCassandraToken = xCassandraToken
}

// WithCollectionID adds the collectionID to the delete collection params
func (o *DeleteCollectionParams) WithCollectionID(collectionID string) *DeleteCollectionParams {
	o.SetCollectionID(collectionID)
	return o
}

// SetCollectionID adds the collectionId to the delete collection params
func (o *DeleteCollectionParams) SetCollectionID(collectionID string) {
	o.CollectionID = collectionID
}

// WithNamespaceID adds the namespaceID to the delete collection params
func (o *DeleteCollectionParams) WithNamespaceID(namespaceID string) *DeleteCollectionParams {
	o.SetNamespaceID(namespaceID)
	return o
}

// SetNamespaceID adds the namespaceId to the delete collection params
func (o *DeleteCollectionParams) SetNamespaceID(namespaceID string) {
	o.NamespaceID = namespaceID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteCollectionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-Cassandra-Token
	if err := r.SetHeaderParam("X-Cassandra-Token", o.XCassandraToken); err != nil {
		return err
	}

	// path param collection-id
	if err := r.SetPathParam("collection-id", o.CollectionID); err != nil {
		return err
	}

	// path param namespace-id
	if err := r.SetPathParam("namespace-id", o.NamespaceID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
