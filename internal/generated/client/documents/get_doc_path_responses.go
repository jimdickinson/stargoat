// Code generated by go-swagger; DO NOT EDIT.

package documents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jimdickinson/stargoat/internal/generated/models"
)

// GetDocPathReader is a Reader for the GetDocPath structure.
type GetDocPathReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDocPathReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDocPathOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewGetDocPathNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDocPathBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetDocPathUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDocPathForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDocPathInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDocPathOK creates a GetDocPathOK with default headers values
func NewGetDocPathOK() *GetDocPathOK {
	return &GetDocPathOK{}
}

/*GetDocPathOK handles this case with default header values.

OK
*/
type GetDocPathOK struct {
	Payload *models.DocumentResponseWrapper
}

func (o *GetDocPathOK) Error() string {
	return fmt.Sprintf("[GET /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}/{document-path}][%d] getDocPathOK  %+v", 200, o.Payload)
}

func (o *GetDocPathOK) GetPayload() *models.DocumentResponseWrapper {
	return o.Payload
}

func (o *GetDocPathOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DocumentResponseWrapper)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDocPathNoContent creates a GetDocPathNoContent with default headers values
func NewGetDocPathNoContent() *GetDocPathNoContent {
	return &GetDocPathNoContent{}
}

/*GetDocPathNoContent handles this case with default header values.

No Content
*/
type GetDocPathNoContent struct {
}

func (o *GetDocPathNoContent) Error() string {
	return fmt.Sprintf("[GET /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}/{document-path}][%d] getDocPathNoContent ", 204)
}

func (o *GetDocPathNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDocPathBadRequest creates a GetDocPathBadRequest with default headers values
func NewGetDocPathBadRequest() *GetDocPathBadRequest {
	return &GetDocPathBadRequest{}
}

/*GetDocPathBadRequest handles this case with default header values.

Bad Request
*/
type GetDocPathBadRequest struct {
}

func (o *GetDocPathBadRequest) Error() string {
	return fmt.Sprintf("[GET /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}/{document-path}][%d] getDocPathBadRequest ", 400)
}

func (o *GetDocPathBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDocPathUnauthorized creates a GetDocPathUnauthorized with default headers values
func NewGetDocPathUnauthorized() *GetDocPathUnauthorized {
	return &GetDocPathUnauthorized{}
}

/*GetDocPathUnauthorized handles this case with default header values.

Unauthorized
*/
type GetDocPathUnauthorized struct {
}

func (o *GetDocPathUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}/{document-path}][%d] getDocPathUnauthorized ", 401)
}

func (o *GetDocPathUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDocPathForbidden creates a GetDocPathForbidden with default headers values
func NewGetDocPathForbidden() *GetDocPathForbidden {
	return &GetDocPathForbidden{}
}

/*GetDocPathForbidden handles this case with default header values.

Forbidden
*/
type GetDocPathForbidden struct {
}

func (o *GetDocPathForbidden) Error() string {
	return fmt.Sprintf("[GET /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}/{document-path}][%d] getDocPathForbidden ", 403)
}

func (o *GetDocPathForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDocPathInternalServerError creates a GetDocPathInternalServerError with default headers values
func NewGetDocPathInternalServerError() *GetDocPathInternalServerError {
	return &GetDocPathInternalServerError{}
}

/*GetDocPathInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetDocPathInternalServerError struct {
	Payload *models.Error
}

func (o *GetDocPathInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}/{document-path}][%d] getDocPathInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDocPathInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDocPathInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
