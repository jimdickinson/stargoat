// Code generated by go-swagger; DO NOT EDIT.

package documents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetOneNamespaceParams creates a new GetOneNamespaceParams object
// with the default values initialized.
func NewGetOneNamespaceParams() *GetOneNamespaceParams {
	var (
		rawDefault = bool(false)
	)
	return &GetOneNamespaceParams{
		Raw: &rawDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetOneNamespaceParamsWithTimeout creates a new GetOneNamespaceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetOneNamespaceParamsWithTimeout(timeout time.Duration) *GetOneNamespaceParams {
	var (
		rawDefault = bool(false)
	)
	return &GetOneNamespaceParams{
		Raw: &rawDefault,

		timeout: timeout,
	}
}

// NewGetOneNamespaceParamsWithContext creates a new GetOneNamespaceParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetOneNamespaceParamsWithContext(ctx context.Context) *GetOneNamespaceParams {
	var (
		rawDefault = bool(false)
	)
	return &GetOneNamespaceParams{
		Raw: &rawDefault,

		Context: ctx,
	}
}

// NewGetOneNamespaceParamsWithHTTPClient creates a new GetOneNamespaceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetOneNamespaceParamsWithHTTPClient(client *http.Client) *GetOneNamespaceParams {
	var (
		rawDefault = bool(false)
	)
	return &GetOneNamespaceParams{
		Raw:        &rawDefault,
		HTTPClient: client,
	}
}

/*GetOneNamespaceParams contains all the parameters to send to the API endpoint
for the get one namespace operation typically these are written to a http.Request
*/
type GetOneNamespaceParams struct {

	/*XCassandraToken
	  The token returned from the authorization endpoint. Use this token in each request.

	*/
	XCassandraToken string
	/*NamespaceID
	  The namespace to use for the request.

	*/
	NamespaceID string
	/*Raw
	  Unwrap results

	*/
	Raw *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get one namespace params
func (o *GetOneNamespaceParams) WithTimeout(timeout time.Duration) *GetOneNamespaceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get one namespace params
func (o *GetOneNamespaceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get one namespace params
func (o *GetOneNamespaceParams) WithContext(ctx context.Context) *GetOneNamespaceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get one namespace params
func (o *GetOneNamespaceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get one namespace params
func (o *GetOneNamespaceParams) WithHTTPClient(client *http.Client) *GetOneNamespaceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get one namespace params
func (o *GetOneNamespaceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXCassandraToken adds the xCassandraToken to the get one namespace params
func (o *GetOneNamespaceParams) WithXCassandraToken(xCassandraToken string) *GetOneNamespaceParams {
	o.SetXCassandraToken(xCassandraToken)
	return o
}

// SetXCassandraToken adds the xCassandraToken to the get one namespace params
func (o *GetOneNamespaceParams) SetXCassandraToken(xCassandraToken string) {
	o.XCassandraToken = xCassandraToken
}

// WithNamespaceID adds the namespaceID to the get one namespace params
func (o *GetOneNamespaceParams) WithNamespaceID(namespaceID string) *GetOneNamespaceParams {
	o.SetNamespaceID(namespaceID)
	return o
}

// SetNamespaceID adds the namespaceId to the get one namespace params
func (o *GetOneNamespaceParams) SetNamespaceID(namespaceID string) {
	o.NamespaceID = namespaceID
}

// WithRaw adds the raw to the get one namespace params
func (o *GetOneNamespaceParams) WithRaw(raw *bool) *GetOneNamespaceParams {
	o.SetRaw(raw)
	return o
}

// SetRaw adds the raw to the get one namespace params
func (o *GetOneNamespaceParams) SetRaw(raw *bool) {
	o.Raw = raw
}

// WriteToRequest writes these params to a swagger request
func (o *GetOneNamespaceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-Cassandra-Token
	if err := r.SetHeaderParam("X-Cassandra-Token", o.XCassandraToken); err != nil {
		return err
	}

	// path param namespace-id
	if err := r.SetPathParam("namespace-id", o.NamespaceID); err != nil {
		return err
	}

	if o.Raw != nil {

		// query param raw
		var qrRaw bool
		if o.Raw != nil {
			qrRaw = *o.Raw
		}
		qRaw := swag.FormatBool(qrRaw)
		if qRaw != "" {
			if err := r.SetQueryParam("raw", qRaw); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
