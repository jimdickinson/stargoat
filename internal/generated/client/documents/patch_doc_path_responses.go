// Code generated by go-swagger; DO NOT EDIT.

package documents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jimdickinson/stargoat/internal/generated/models"
)

// PatchDocPathReader is a Reader for the PatchDocPath structure.
type PatchDocPathReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchDocPathReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchDocPathOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchDocPathBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchDocPathUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchDocPathForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchDocPathInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchDocPathOK creates a PatchDocPathOK with default headers values
func NewPatchDocPathOK() *PatchDocPathOK {
	return &PatchDocPathOK{}
}

/*PatchDocPathOK handles this case with default header values.

OK
*/
type PatchDocPathOK struct {
	Payload *models.WriteDocResponse
}

func (o *PatchDocPathOK) Error() string {
	return fmt.Sprintf("[PATCH /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}/{document-path}][%d] patchDocPathOK  %+v", 200, o.Payload)
}

func (o *PatchDocPathOK) GetPayload() *models.WriteDocResponse {
	return o.Payload
}

func (o *PatchDocPathOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WriteDocResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchDocPathBadRequest creates a PatchDocPathBadRequest with default headers values
func NewPatchDocPathBadRequest() *PatchDocPathBadRequest {
	return &PatchDocPathBadRequest{}
}

/*PatchDocPathBadRequest handles this case with default header values.

Bad request
*/
type PatchDocPathBadRequest struct {
}

func (o *PatchDocPathBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}/{document-path}][%d] patchDocPathBadRequest ", 400)
}

func (o *PatchDocPathBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchDocPathUnauthorized creates a PatchDocPathUnauthorized with default headers values
func NewPatchDocPathUnauthorized() *PatchDocPathUnauthorized {
	return &PatchDocPathUnauthorized{}
}

/*PatchDocPathUnauthorized handles this case with default header values.

Unauthorized
*/
type PatchDocPathUnauthorized struct {
}

func (o *PatchDocPathUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}/{document-path}][%d] patchDocPathUnauthorized ", 401)
}

func (o *PatchDocPathUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchDocPathForbidden creates a PatchDocPathForbidden with default headers values
func NewPatchDocPathForbidden() *PatchDocPathForbidden {
	return &PatchDocPathForbidden{}
}

/*PatchDocPathForbidden handles this case with default header values.

Forbidden
*/
type PatchDocPathForbidden struct {
}

func (o *PatchDocPathForbidden) Error() string {
	return fmt.Sprintf("[PATCH /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}/{document-path}][%d] patchDocPathForbidden ", 403)
}

func (o *PatchDocPathForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchDocPathInternalServerError creates a PatchDocPathInternalServerError with default headers values
func NewPatchDocPathInternalServerError() *PatchDocPathInternalServerError {
	return &PatchDocPathInternalServerError{}
}

/*PatchDocPathInternalServerError handles this case with default header values.

Internal Server Error
*/
type PatchDocPathInternalServerError struct {
	Payload *models.Error
}

func (o *PatchDocPathInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}/{document-path}][%d] patchDocPathInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchDocPathInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchDocPathInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
