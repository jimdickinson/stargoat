// Code generated by go-swagger; DO NOT EDIT.

package documents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jimdickinson/stargoat/internal/generated/models"
)

// PatchDocReader is a Reader for the PatchDoc structure.
type PatchDocReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchDocReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchDocOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchDocBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchDocUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchDocForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchDocInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchDocOK creates a PatchDocOK with default headers values
func NewPatchDocOK() *PatchDocOK {
	return &PatchDocOK{}
}

/*PatchDocOK handles this case with default header values.

OK
*/
type PatchDocOK struct {
	Payload *models.WriteDocResponse
}

func (o *PatchDocOK) Error() string {
	return fmt.Sprintf("[PATCH /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}][%d] patchDocOK  %+v", 200, o.Payload)
}

func (o *PatchDocOK) GetPayload() *models.WriteDocResponse {
	return o.Payload
}

func (o *PatchDocOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WriteDocResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchDocBadRequest creates a PatchDocBadRequest with default headers values
func NewPatchDocBadRequest() *PatchDocBadRequest {
	return &PatchDocBadRequest{}
}

/*PatchDocBadRequest handles this case with default header values.

Bad request
*/
type PatchDocBadRequest struct {
}

func (o *PatchDocBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}][%d] patchDocBadRequest ", 400)
}

func (o *PatchDocBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchDocUnauthorized creates a PatchDocUnauthorized with default headers values
func NewPatchDocUnauthorized() *PatchDocUnauthorized {
	return &PatchDocUnauthorized{}
}

/*PatchDocUnauthorized handles this case with default header values.

Unauthorized
*/
type PatchDocUnauthorized struct {
}

func (o *PatchDocUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}][%d] patchDocUnauthorized ", 401)
}

func (o *PatchDocUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchDocForbidden creates a PatchDocForbidden with default headers values
func NewPatchDocForbidden() *PatchDocForbidden {
	return &PatchDocForbidden{}
}

/*PatchDocForbidden handles this case with default header values.

Forbidden
*/
type PatchDocForbidden struct {
}

func (o *PatchDocForbidden) Error() string {
	return fmt.Sprintf("[PATCH /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}][%d] patchDocForbidden ", 403)
}

func (o *PatchDocForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchDocInternalServerError creates a PatchDocInternalServerError with default headers values
func NewPatchDocInternalServerError() *PatchDocInternalServerError {
	return &PatchDocInternalServerError{}
}

/*PatchDocInternalServerError handles this case with default header values.

Internal Server Error
*/
type PatchDocInternalServerError struct {
	Payload *models.Error
}

func (o *PatchDocInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}][%d] patchDocInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchDocInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchDocInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
