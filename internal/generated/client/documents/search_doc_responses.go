// Code generated by go-swagger; DO NOT EDIT.

package documents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jimdickinson/stargoat/internal/generated/models"
)

// SearchDocReader is a Reader for the SearchDoc structure.
type SearchDocReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchDocReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchDocOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewSearchDocNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSearchDocBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSearchDocUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSearchDocForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSearchDocInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSearchDocOK creates a SearchDocOK with default headers values
func NewSearchDocOK() *SearchDocOK {
	return &SearchDocOK{}
}

/*SearchDocOK handles this case with default header values.

OK
*/
type SearchDocOK struct {
	Payload *models.DocumentResponseWrapper
}

func (o *SearchDocOK) Error() string {
	return fmt.Sprintf("[GET /v2/namespaces/{namespace-id}/collections/{collection-id}][%d] searchDocOK  %+v", 200, o.Payload)
}

func (o *SearchDocOK) GetPayload() *models.DocumentResponseWrapper {
	return o.Payload
}

func (o *SearchDocOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DocumentResponseWrapper)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchDocNoContent creates a SearchDocNoContent with default headers values
func NewSearchDocNoContent() *SearchDocNoContent {
	return &SearchDocNoContent{}
}

/*SearchDocNoContent handles this case with default header values.

No Content
*/
type SearchDocNoContent struct {
}

func (o *SearchDocNoContent) Error() string {
	return fmt.Sprintf("[GET /v2/namespaces/{namespace-id}/collections/{collection-id}][%d] searchDocNoContent ", 204)
}

func (o *SearchDocNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSearchDocBadRequest creates a SearchDocBadRequest with default headers values
func NewSearchDocBadRequest() *SearchDocBadRequest {
	return &SearchDocBadRequest{}
}

/*SearchDocBadRequest handles this case with default header values.

Bad Request
*/
type SearchDocBadRequest struct {
}

func (o *SearchDocBadRequest) Error() string {
	return fmt.Sprintf("[GET /v2/namespaces/{namespace-id}/collections/{collection-id}][%d] searchDocBadRequest ", 400)
}

func (o *SearchDocBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSearchDocUnauthorized creates a SearchDocUnauthorized with default headers values
func NewSearchDocUnauthorized() *SearchDocUnauthorized {
	return &SearchDocUnauthorized{}
}

/*SearchDocUnauthorized handles this case with default header values.

Unauthorized
*/
type SearchDocUnauthorized struct {
}

func (o *SearchDocUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v2/namespaces/{namespace-id}/collections/{collection-id}][%d] searchDocUnauthorized ", 401)
}

func (o *SearchDocUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSearchDocForbidden creates a SearchDocForbidden with default headers values
func NewSearchDocForbidden() *SearchDocForbidden {
	return &SearchDocForbidden{}
}

/*SearchDocForbidden handles this case with default header values.

Forbidden
*/
type SearchDocForbidden struct {
}

func (o *SearchDocForbidden) Error() string {
	return fmt.Sprintf("[GET /v2/namespaces/{namespace-id}/collections/{collection-id}][%d] searchDocForbidden ", 403)
}

func (o *SearchDocForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSearchDocInternalServerError creates a SearchDocInternalServerError with default headers values
func NewSearchDocInternalServerError() *SearchDocInternalServerError {
	return &SearchDocInternalServerError{}
}

/*SearchDocInternalServerError handles this case with default header values.

Internal Server Error
*/
type SearchDocInternalServerError struct {
	Payload *models.Error
}

func (o *SearchDocInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v2/namespaces/{namespace-id}/collections/{collection-id}][%d] searchDocInternalServerError  %+v", 500, o.Payload)
}

func (o *SearchDocInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *SearchDocInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
