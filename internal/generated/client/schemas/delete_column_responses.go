// Code generated by go-swagger; DO NOT EDIT.

package schemas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jimdickinson/stargoat/internal/generated/models"
)

// DeleteColumnReader is a Reader for the DeleteColumn structure.
type DeleteColumnReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteColumnReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteColumnNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteColumnBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteColumnUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteColumnForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteColumnInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteColumnNoContent creates a DeleteColumnNoContent with default headers values
func NewDeleteColumnNoContent() *DeleteColumnNoContent {
	return &DeleteColumnNoContent{}
}

/*DeleteColumnNoContent handles this case with default header values.

No Content
*/
type DeleteColumnNoContent struct {
}

func (o *DeleteColumnNoContent) Error() string {
	return fmt.Sprintf("[DELETE /v1/keyspaces/{keyspaceName}/tables/{tableName}/columns/{columnName}][%d] deleteColumnNoContent ", 204)
}

func (o *DeleteColumnNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteColumnBadRequest creates a DeleteColumnBadRequest with default headers values
func NewDeleteColumnBadRequest() *DeleteColumnBadRequest {
	return &DeleteColumnBadRequest{}
}

/*DeleteColumnBadRequest handles this case with default header values.

Bad request
*/
type DeleteColumnBadRequest struct {
	Payload *models.Error
}

func (o *DeleteColumnBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /v1/keyspaces/{keyspaceName}/tables/{tableName}/columns/{columnName}][%d] deleteColumnBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteColumnBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteColumnBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteColumnUnauthorized creates a DeleteColumnUnauthorized with default headers values
func NewDeleteColumnUnauthorized() *DeleteColumnUnauthorized {
	return &DeleteColumnUnauthorized{}
}

/*DeleteColumnUnauthorized handles this case with default header values.

Unauthorized
*/
type DeleteColumnUnauthorized struct {
	Payload *models.Error
}

func (o *DeleteColumnUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /v1/keyspaces/{keyspaceName}/tables/{tableName}/columns/{columnName}][%d] deleteColumnUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteColumnUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteColumnUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteColumnForbidden creates a DeleteColumnForbidden with default headers values
func NewDeleteColumnForbidden() *DeleteColumnForbidden {
	return &DeleteColumnForbidden{}
}

/*DeleteColumnForbidden handles this case with default header values.

Forbidden
*/
type DeleteColumnForbidden struct {
	Payload *models.Error
}

func (o *DeleteColumnForbidden) Error() string {
	return fmt.Sprintf("[DELETE /v1/keyspaces/{keyspaceName}/tables/{tableName}/columns/{columnName}][%d] deleteColumnForbidden  %+v", 403, o.Payload)
}

func (o *DeleteColumnForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteColumnForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteColumnInternalServerError creates a DeleteColumnInternalServerError with default headers values
func NewDeleteColumnInternalServerError() *DeleteColumnInternalServerError {
	return &DeleteColumnInternalServerError{}
}

/*DeleteColumnInternalServerError handles this case with default header values.

Internal Server Error
*/
type DeleteColumnInternalServerError struct {
	Payload *models.Error
}

func (o *DeleteColumnInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /v1/keyspaces/{keyspaceName}/tables/{tableName}/columns/{columnName}][%d] deleteColumnInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteColumnInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteColumnInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
