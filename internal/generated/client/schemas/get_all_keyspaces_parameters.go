// Code generated by go-swagger; DO NOT EDIT.

package schemas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAllKeyspacesParams creates a new GetAllKeyspacesParams object
// with the default values initialized.
func NewGetAllKeyspacesParams() *GetAllKeyspacesParams {
	var (
		rawDefault = bool(false)
	)
	return &GetAllKeyspacesParams{
		Raw: &rawDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllKeyspacesParamsWithTimeout creates a new GetAllKeyspacesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAllKeyspacesParamsWithTimeout(timeout time.Duration) *GetAllKeyspacesParams {
	var (
		rawDefault = bool(false)
	)
	return &GetAllKeyspacesParams{
		Raw: &rawDefault,

		timeout: timeout,
	}
}

// NewGetAllKeyspacesParamsWithContext creates a new GetAllKeyspacesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAllKeyspacesParamsWithContext(ctx context.Context) *GetAllKeyspacesParams {
	var (
		rawDefault = bool(false)
	)
	return &GetAllKeyspacesParams{
		Raw: &rawDefault,

		Context: ctx,
	}
}

// NewGetAllKeyspacesParamsWithHTTPClient creates a new GetAllKeyspacesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAllKeyspacesParamsWithHTTPClient(client *http.Client) *GetAllKeyspacesParams {
	var (
		rawDefault = bool(false)
	)
	return &GetAllKeyspacesParams{
		Raw:        &rawDefault,
		HTTPClient: client,
	}
}

/*GetAllKeyspacesParams contains all the parameters to send to the API endpoint
for the get all keyspaces operation typically these are written to a http.Request
*/
type GetAllKeyspacesParams struct {

	/*XCassandraToken
	  The token returned from the authorization endpoint. Use this token in each request.

	*/
	XCassandraToken string
	/*Raw
	  Unwrap results

	*/
	Raw *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get all keyspaces params
func (o *GetAllKeyspacesParams) WithTimeout(timeout time.Duration) *GetAllKeyspacesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all keyspaces params
func (o *GetAllKeyspacesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all keyspaces params
func (o *GetAllKeyspacesParams) WithContext(ctx context.Context) *GetAllKeyspacesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all keyspaces params
func (o *GetAllKeyspacesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all keyspaces params
func (o *GetAllKeyspacesParams) WithHTTPClient(client *http.Client) *GetAllKeyspacesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all keyspaces params
func (o *GetAllKeyspacesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXCassandraToken adds the xCassandraToken to the get all keyspaces params
func (o *GetAllKeyspacesParams) WithXCassandraToken(xCassandraToken string) *GetAllKeyspacesParams {
	o.SetXCassandraToken(xCassandraToken)
	return o
}

// SetXCassandraToken adds the xCassandraToken to the get all keyspaces params
func (o *GetAllKeyspacesParams) SetXCassandraToken(xCassandraToken string) {
	o.XCassandraToken = xCassandraToken
}

// WithRaw adds the raw to the get all keyspaces params
func (o *GetAllKeyspacesParams) WithRaw(raw *bool) *GetAllKeyspacesParams {
	o.SetRaw(raw)
	return o
}

// SetRaw adds the raw to the get all keyspaces params
func (o *GetAllKeyspacesParams) SetRaw(raw *bool) {
	o.Raw = raw
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllKeyspacesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-Cassandra-Token
	if err := r.SetHeaderParam("X-Cassandra-Token", o.XCassandraToken); err != nil {
		return err
	}

	if o.Raw != nil {

		// query param raw
		var qrRaw bool
		if o.Raw != nil {
			qrRaw = *o.Raw
		}
		qRaw := swag.FormatBool(qrRaw)
		if qRaw != "" {
			if err := r.SetQueryParam("raw", qRaw); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
