// Code generated by go-swagger; DO NOT EDIT.

package schemas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jimdickinson/stargoat/internal/generated/models"
)

// GetOneTableReader is a Reader for the GetOneTable structure.
type GetOneTableReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOneTableReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOneTableOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetOneTableBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetOneTableUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOneTableForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOneTableNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOneTableInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOneTableOK creates a GetOneTableOK with default headers values
func NewGetOneTableOK() *GetOneTableOK {
	return &GetOneTableOK{}
}

/*GetOneTableOK handles this case with default header values.

OK
*/
type GetOneTableOK struct {
	Payload *models.Table
}

func (o *GetOneTableOK) Error() string {
	return fmt.Sprintf("[GET /v1/keyspaces/{keyspaceName}/tables/{tableName}][%d] getOneTableOK  %+v", 200, o.Payload)
}

func (o *GetOneTableOK) GetPayload() *models.Table {
	return o.Payload
}

func (o *GetOneTableOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Table)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOneTableBadRequest creates a GetOneTableBadRequest with default headers values
func NewGetOneTableBadRequest() *GetOneTableBadRequest {
	return &GetOneTableBadRequest{}
}

/*GetOneTableBadRequest handles this case with default header values.

Bad request
*/
type GetOneTableBadRequest struct {
	Payload *models.Error
}

func (o *GetOneTableBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/keyspaces/{keyspaceName}/tables/{tableName}][%d] getOneTableBadRequest  %+v", 400, o.Payload)
}

func (o *GetOneTableBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOneTableBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOneTableUnauthorized creates a GetOneTableUnauthorized with default headers values
func NewGetOneTableUnauthorized() *GetOneTableUnauthorized {
	return &GetOneTableUnauthorized{}
}

/*GetOneTableUnauthorized handles this case with default header values.

Unauthorized
*/
type GetOneTableUnauthorized struct {
	Payload *models.Error
}

func (o *GetOneTableUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/keyspaces/{keyspaceName}/tables/{tableName}][%d] getOneTableUnauthorized  %+v", 401, o.Payload)
}

func (o *GetOneTableUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOneTableUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOneTableForbidden creates a GetOneTableForbidden with default headers values
func NewGetOneTableForbidden() *GetOneTableForbidden {
	return &GetOneTableForbidden{}
}

/*GetOneTableForbidden handles this case with default header values.

Forbidden
*/
type GetOneTableForbidden struct {
	Payload *models.Error
}

func (o *GetOneTableForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/keyspaces/{keyspaceName}/tables/{tableName}][%d] getOneTableForbidden  %+v", 403, o.Payload)
}

func (o *GetOneTableForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOneTableForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOneTableNotFound creates a GetOneTableNotFound with default headers values
func NewGetOneTableNotFound() *GetOneTableNotFound {
	return &GetOneTableNotFound{}
}

/*GetOneTableNotFound handles this case with default header values.

Not Found
*/
type GetOneTableNotFound struct {
	Payload *models.Error
}

func (o *GetOneTableNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/keyspaces/{keyspaceName}/tables/{tableName}][%d] getOneTableNotFound  %+v", 404, o.Payload)
}

func (o *GetOneTableNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOneTableNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOneTableInternalServerError creates a GetOneTableInternalServerError with default headers values
func NewGetOneTableInternalServerError() *GetOneTableInternalServerError {
	return &GetOneTableInternalServerError{}
}

/*GetOneTableInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetOneTableInternalServerError struct {
	Payload *models.Error
}

func (o *GetOneTableInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/keyspaces/{keyspaceName}/tables/{tableName}][%d] getOneTableInternalServerError  %+v", 500, o.Payload)
}

func (o *GetOneTableInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOneTableInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
