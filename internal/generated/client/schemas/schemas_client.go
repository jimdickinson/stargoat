// Code generated by go-swagger; DO NOT EDIT.

package schemas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new schemas API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for schemas API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddColumn(params *AddColumnParams) (*AddColumnCreated, error)

	AddTable(params *AddTableParams) (*AddTableCreated, error)

	CreateColumn(params *CreateColumnParams) (*CreateColumnCreated, error)

	CreateKeyspace(params *CreateKeyspaceParams) (*CreateKeyspaceCreated, error)

	CreateTable(params *CreateTableParams) (*CreateTableCreated, error)

	DeleteColumn(params *DeleteColumnParams) (*DeleteColumnNoContent, error)

	DeleteColumn1(params *DeleteColumn1Params) (*DeleteColumn1NoContent, error)

	DeleteKeyspace(params *DeleteKeyspaceParams) (*DeleteKeyspaceNoContent, error)

	DeleteTable(params *DeleteTableParams) (*DeleteTableNoContent, error)

	DeleteTable1(params *DeleteTable1Params) (*DeleteTable1NoContent, error)

	GetAllColumns(params *GetAllColumnsParams) (*GetAllColumnsOK, error)

	GetAllKeyspaces(params *GetAllKeyspacesParams) (*GetAllKeyspacesOK, error)

	GetAllTables(params *GetAllTablesParams) (*GetAllTablesOK, error)

	GetOneColumn(params *GetOneColumnParams) (*GetOneColumnOK, error)

	GetOneColumn1(params *GetOneColumn1Params) (*GetOneColumn1OK, error)

	GetOneKeyspace(params *GetOneKeyspaceParams) (*GetOneKeyspaceOK, error)

	GetOneTable(params *GetOneTableParams) (*GetOneTableOK, error)

	GetOneTable1(params *GetOneTable1Params) (*GetOneTable1OK, error)

	ListAllColumns(params *ListAllColumnsParams) (*ListAllColumnsOK, error)

	ListAllKeyspaces(params *ListAllKeyspacesParams) (*ListAllKeyspacesOK, error)

	ListAllTables(params *ListAllTablesParams) (*ListAllTablesOK, error)

	UpdateColumn(params *UpdateColumnParams) (*UpdateColumnOK, error)

	UpdateColumn1(params *UpdateColumn1Params) (*UpdateColumn1OK, error)

	UpdateTable(params *UpdateTableParams) (*UpdateTableOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddColumn adds a column

  Add a single column to a table.
*/
func (a *Client) AddColumn(params *AddColumnParams) (*AddColumnCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddColumnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addColumn",
		Method:             "POST",
		PathPattern:        "/v1/keyspaces/{keyspaceName}/tables/{tableName}/columns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddColumnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddColumnCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addColumn: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddTable adds a table

  Add a table in a specific keyspace.
*/
func (a *Client) AddTable(params *AddTableParams) (*AddTableCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addTable",
		Method:             "POST",
		PathPattern:        "/v1/keyspaces/{keyspaceName}/tables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddTableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddTableCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateColumn creates a column

  Add a single column to a table.
*/
func (a *Client) CreateColumn(params *CreateColumnParams) (*CreateColumnCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateColumnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createColumn",
		Method:             "POST",
		PathPattern:        "/v2/schemas/keyspaces/{keyspaceName}/tables/{tableName}/columns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateColumnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateColumnCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createColumn: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateKeyspace creates a keyspace

  Create a new keyspace.
*/
func (a *Client) CreateKeyspace(params *CreateKeyspaceParams) (*CreateKeyspaceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateKeyspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createKeyspace",
		Method:             "POST",
		PathPattern:        "/v2/schemas/keyspaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateKeyspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateKeyspaceCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createKeyspace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateTable creates a table

  Add a table in a specific keyspace.
*/
func (a *Client) CreateTable(params *CreateTableParams) (*CreateTableCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTable",
		Method:             "POST",
		PathPattern:        "/v2/schemas/keyspaces/{keyspaceName}/tables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTableCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteColumn deletes a column

  Delete a single column in a specific table.
*/
func (a *Client) DeleteColumn(params *DeleteColumnParams) (*DeleteColumnNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteColumnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteColumn",
		Method:             "DELETE",
		PathPattern:        "/v1/keyspaces/{keyspaceName}/tables/{tableName}/columns/{columnName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteColumnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteColumnNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteColumn: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteColumn1 deletes a column

  Delete a single column in a specific table.
*/
func (a *Client) DeleteColumn1(params *DeleteColumn1Params) (*DeleteColumn1NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteColumn1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteColumn_1",
		Method:             "DELETE",
		PathPattern:        "/v2/schemas/keyspaces/{keyspaceName}/tables/{tableName}/columns/{columnName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteColumn1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteColumn1NoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteColumn_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteKeyspace deletes a keyspace

  Delete a single keyspace.
*/
func (a *Client) DeleteKeyspace(params *DeleteKeyspaceParams) (*DeleteKeyspaceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteKeyspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteKeyspace",
		Method:             "DELETE",
		PathPattern:        "/v2/schemas/keyspaces/{keyspaceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteKeyspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteKeyspaceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteKeyspace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTable deletes a table

  Delete a single table in the specified keyspace.
*/
func (a *Client) DeleteTable(params *DeleteTableParams) (*DeleteTableNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTable",
		Method:             "DELETE",
		PathPattern:        "/v1/keyspaces/{keyspaceName}/tables/{tableName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTableNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTable1 deletes a table

  Delete a single table in the specified keyspace.
*/
func (a *Client) DeleteTable1(params *DeleteTable1Params) (*DeleteTable1NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTable1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTable_1",
		Method:             "DELETE",
		PathPattern:        "/v2/schemas/keyspaces/{keyspaceName}/tables/{tableName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTable1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTable1NoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTable_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllColumns gets all columns

  Return all columns for a specified table.
*/
func (a *Client) GetAllColumns(params *GetAllColumnsParams) (*GetAllColumnsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllColumnsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllColumns",
		Method:             "GET",
		PathPattern:        "/v2/schemas/keyspaces/{keyspaceName}/tables/{tableName}/columns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllColumnsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllColumnsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllColumns: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllKeyspaces gets all keyspaces

  Retrieve all available keyspaces.
*/
func (a *Client) GetAllKeyspaces(params *GetAllKeyspacesParams) (*GetAllKeyspacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllKeyspacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllKeyspaces",
		Method:             "GET",
		PathPattern:        "/v2/schemas/keyspaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllKeyspacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllKeyspacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllKeyspaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllTables gets all tables

  Retrieve all tables in a specific keyspace.
*/
func (a *Client) GetAllTables(params *GetAllTablesParams) (*GetAllTablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllTablesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllTables",
		Method:             "GET",
		PathPattern:        "/v2/schemas/keyspaces/{keyspaceName}/tables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllTablesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllTablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllTables: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOneColumn retrieves a column

  Return a single column specification in a specific table.
*/
func (a *Client) GetOneColumn(params *GetOneColumnParams) (*GetOneColumnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOneColumnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOneColumn",
		Method:             "GET",
		PathPattern:        "/v1/keyspaces/{keyspaceName}/tables/{tableName}/columns/{columnName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOneColumnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOneColumnOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOneColumn: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOneColumn1 gets a column

  Return a single column specification in a specific table.
*/
func (a *Client) GetOneColumn1(params *GetOneColumn1Params) (*GetOneColumn1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOneColumn1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOneColumn_1",
		Method:             "GET",
		PathPattern:        "/v2/schemas/keyspaces/{keyspaceName}/tables/{tableName}/columns/{columnName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOneColumn1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOneColumn1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOneColumn_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOneKeyspace gets a keyspace

  Return a single keyspace specification.
*/
func (a *Client) GetOneKeyspace(params *GetOneKeyspaceParams) (*GetOneKeyspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOneKeyspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOneKeyspace",
		Method:             "GET",
		PathPattern:        "/v2/schemas/keyspaces/{keyspaceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOneKeyspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOneKeyspaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOneKeyspace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOneTable returns a table

  Retrieve data for a single table in a specific keyspace.
*/
func (a *Client) GetOneTable(params *GetOneTableParams) (*GetOneTableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOneTableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOneTable",
		Method:             "GET",
		PathPattern:        "/v1/keyspaces/{keyspaceName}/tables/{tableName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOneTableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOneTableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOneTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOneTable1 gets a table

  Retrieve data for a single table in a specific keyspace.
*/
func (a *Client) GetOneTable1(params *GetOneTable1Params) (*GetOneTable1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOneTable1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOneTable_1",
		Method:             "GET",
		PathPattern:        "/v2/schemas/keyspaces/{keyspaceName}/tables/{tableName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOneTable1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOneTable1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOneTable_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllColumns retrieves all columns

  Return all columns for a specified table.
*/
func (a *Client) ListAllColumns(params *ListAllColumnsParams) (*ListAllColumnsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllColumnsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllColumns",
		Method:             "GET",
		PathPattern:        "/v1/keyspaces/{keyspaceName}/tables/{tableName}/columns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllColumnsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllColumnsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllColumns: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllKeyspaces returns all keyspaces

  Retrieve all available keyspaces in the specific database.
*/
func (a *Client) ListAllKeyspaces(params *ListAllKeyspacesParams) (*ListAllKeyspacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllKeyspacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllKeyspaces",
		Method:             "GET",
		PathPattern:        "/v1/keyspaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllKeyspacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllKeyspacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllKeyspaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllTables returns all tables

  Retrieve all tables in a specific keyspace.
*/
func (a *Client) ListAllTables(params *ListAllTablesParams) (*ListAllTablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllTablesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllTables",
		Method:             "GET",
		PathPattern:        "/v1/keyspaces/{keyspaceName}/tables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllTablesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllTablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllTables: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateColumn updates a column

  Update a single column in a specific table.
*/
func (a *Client) UpdateColumn(params *UpdateColumnParams) (*UpdateColumnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateColumnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateColumn",
		Method:             "PUT",
		PathPattern:        "/v1/keyspaces/{keyspaceName}/tables/{tableName}/columns/{columnName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateColumnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateColumnOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateColumn: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateColumn1 updates a column

  Update a single column in a specific table.
*/
func (a *Client) UpdateColumn1(params *UpdateColumn1Params) (*UpdateColumn1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateColumn1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateColumn_1",
		Method:             "PUT",
		PathPattern:        "/v2/schemas/keyspaces/{keyspaceName}/tables/{tableName}/columns/{columnName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateColumn1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateColumn1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateColumn_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateTable replaces a table definition

  Update a single table definition, except for columns, in a keyspace.
*/
func (a *Client) UpdateTable(params *UpdateTableParams) (*UpdateTableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateTable",
		Method:             "PUT",
		PathPattern:        "/v2/schemas/keyspaces/{keyspaceName}/tables/{tableName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
