// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusteringExpression clustering expression
//
// swagger:model ClusteringExpression
type ClusteringExpression struct {

	// The name of the column to order by
	// Required: true
	Column *string `json:"column"`

	// The clustering order
	// Required: true
	// Read Only: true
	// Enum: [asc desc]
	Order string `json:"order"`
}

// Validate validates this clustering expression
func (m *ClusteringExpression) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColumn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrder(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusteringExpression) validateColumn(formats strfmt.Registry) error {

	if err := validate.Required("column", "body", m.Column); err != nil {
		return err
	}

	return nil
}

var clusteringExpressionTypeOrderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["asc","desc"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusteringExpressionTypeOrderPropEnum = append(clusteringExpressionTypeOrderPropEnum, v)
	}
}

const (

	// ClusteringExpressionOrderAsc captures enum value "asc"
	ClusteringExpressionOrderAsc string = "asc"

	// ClusteringExpressionOrderDesc captures enum value "desc"
	ClusteringExpressionOrderDesc string = "desc"
)

// prop value enum
func (m *ClusteringExpression) validateOrderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusteringExpressionTypeOrderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusteringExpression) validateOrder(formats strfmt.Registry) error {

	if err := validate.RequiredString("order", "body", string(m.Order)); err != nil {
		return err
	}

	// value enum
	if err := m.validateOrderEnum("order", "body", m.Order); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusteringExpression) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusteringExpression) UnmarshalBinary(b []byte) error {
	var res ClusteringExpression
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
