// Code generated by go-swagger; DO NOT EDIT.

package data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jimdickinson/stargoat/pkg/models"
)

// GetRowsReader is a Reader for the GetRows structure.
type GetRowsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRowsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRowsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRowsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRowsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRowsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRowsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRowsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRowsOK creates a GetRowsOK with default headers values
func NewGetRowsOK() *GetRowsOK {
	return &GetRowsOK{}
}

/*GetRowsOK handles this case with default header values.

OK
*/
type GetRowsOK struct {
	Payload *models.Rows
}

func (o *GetRowsOK) Error() string {
	return fmt.Sprintf("[GET /v1/keyspaces/{keyspaceName}/tables/{tableName}/rows/{primaryKey}][%d] getRowsOK  %+v", 200, o.Payload)
}

func (o *GetRowsOK) GetPayload() *models.Rows {
	return o.Payload
}

func (o *GetRowsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Rows)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRowsBadRequest creates a GetRowsBadRequest with default headers values
func NewGetRowsBadRequest() *GetRowsBadRequest {
	return &GetRowsBadRequest{}
}

/*GetRowsBadRequest handles this case with default header values.

Bad request
*/
type GetRowsBadRequest struct {
	Payload *models.Error
}

func (o *GetRowsBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/keyspaces/{keyspaceName}/tables/{tableName}/rows/{primaryKey}][%d] getRowsBadRequest  %+v", 400, o.Payload)
}

func (o *GetRowsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRowsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRowsUnauthorized creates a GetRowsUnauthorized with default headers values
func NewGetRowsUnauthorized() *GetRowsUnauthorized {
	return &GetRowsUnauthorized{}
}

/*GetRowsUnauthorized handles this case with default header values.

Unauthorized
*/
type GetRowsUnauthorized struct {
	Payload *models.Error
}

func (o *GetRowsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/keyspaces/{keyspaceName}/tables/{tableName}/rows/{primaryKey}][%d] getRowsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRowsUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRowsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRowsForbidden creates a GetRowsForbidden with default headers values
func NewGetRowsForbidden() *GetRowsForbidden {
	return &GetRowsForbidden{}
}

/*GetRowsForbidden handles this case with default header values.

Forbidden
*/
type GetRowsForbidden struct {
	Payload *models.Error
}

func (o *GetRowsForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/keyspaces/{keyspaceName}/tables/{tableName}/rows/{primaryKey}][%d] getRowsForbidden  %+v", 403, o.Payload)
}

func (o *GetRowsForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRowsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRowsNotFound creates a GetRowsNotFound with default headers values
func NewGetRowsNotFound() *GetRowsNotFound {
	return &GetRowsNotFound{}
}

/*GetRowsNotFound handles this case with default header values.

Not Found
*/
type GetRowsNotFound struct {
	Payload *models.Error
}

func (o *GetRowsNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/keyspaces/{keyspaceName}/tables/{tableName}/rows/{primaryKey}][%d] getRowsNotFound  %+v", 404, o.Payload)
}

func (o *GetRowsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRowsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRowsInternalServerError creates a GetRowsInternalServerError with default headers values
func NewGetRowsInternalServerError() *GetRowsInternalServerError {
	return &GetRowsInternalServerError{}
}

/*GetRowsInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetRowsInternalServerError struct {
	Payload *models.Error
}

func (o *GetRowsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/keyspaces/{keyspaceName}/tables/{tableName}/rows/{primaryKey}][%d] getRowsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRowsInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRowsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
