// Code generated by go-swagger; DO NOT EDIT.

package data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jimdickinson/stargoat/pkg/models"
)

// QueryRowsReader is a Reader for the QueryRows structure.
type QueryRowsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryRowsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryRowsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewQueryRowsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewQueryRowsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewQueryRowsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewQueryRowsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewQueryRowsOK creates a QueryRowsOK with default headers values
func NewQueryRowsOK() *QueryRowsOK {
	return &QueryRowsOK{}
}

/*QueryRowsOK handles this case with default header values.

OK
*/
type QueryRowsOK struct {
	Payload *models.Rows
}

func (o *QueryRowsOK) Error() string {
	return fmt.Sprintf("[POST /v1/keyspaces/{keyspaceName}/tables/{tableName}/rows/query][%d] queryRowsOK  %+v", 200, o.Payload)
}

func (o *QueryRowsOK) GetPayload() *models.Rows {
	return o.Payload
}

func (o *QueryRowsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Rows)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryRowsBadRequest creates a QueryRowsBadRequest with default headers values
func NewQueryRowsBadRequest() *QueryRowsBadRequest {
	return &QueryRowsBadRequest{}
}

/*QueryRowsBadRequest handles this case with default header values.

Bad request
*/
type QueryRowsBadRequest struct {
	Payload *models.Error
}

func (o *QueryRowsBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/keyspaces/{keyspaceName}/tables/{tableName}/rows/query][%d] queryRowsBadRequest  %+v", 400, o.Payload)
}

func (o *QueryRowsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *QueryRowsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryRowsUnauthorized creates a QueryRowsUnauthorized with default headers values
func NewQueryRowsUnauthorized() *QueryRowsUnauthorized {
	return &QueryRowsUnauthorized{}
}

/*QueryRowsUnauthorized handles this case with default header values.

Unauthorized
*/
type QueryRowsUnauthorized struct {
	Payload *models.Error
}

func (o *QueryRowsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/keyspaces/{keyspaceName}/tables/{tableName}/rows/query][%d] queryRowsUnauthorized  %+v", 401, o.Payload)
}

func (o *QueryRowsUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *QueryRowsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryRowsForbidden creates a QueryRowsForbidden with default headers values
func NewQueryRowsForbidden() *QueryRowsForbidden {
	return &QueryRowsForbidden{}
}

/*QueryRowsForbidden handles this case with default header values.

Forbidden
*/
type QueryRowsForbidden struct {
	Payload *models.Error
}

func (o *QueryRowsForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/keyspaces/{keyspaceName}/tables/{tableName}/rows/query][%d] queryRowsForbidden  %+v", 403, o.Payload)
}

func (o *QueryRowsForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *QueryRowsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryRowsInternalServerError creates a QueryRowsInternalServerError with default headers values
func NewQueryRowsInternalServerError() *QueryRowsInternalServerError {
	return &QueryRowsInternalServerError{}
}

/*QueryRowsInternalServerError handles this case with default header values.

Internal Server Error
*/
type QueryRowsInternalServerError struct {
	Payload *models.Error
}

func (o *QueryRowsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/keyspaces/{keyspaceName}/tables/{tableName}/rows/query][%d] queryRowsInternalServerError  %+v", 500, o.Payload)
}

func (o *QueryRowsInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *QueryRowsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
