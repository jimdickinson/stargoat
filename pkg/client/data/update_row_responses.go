// Code generated by go-swagger; DO NOT EDIT.

package data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jimdickinson/stargoat/pkg/models"
)

// UpdateRowReader is a Reader for the UpdateRow structure.
type UpdateRowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateRowOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRowBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateRowUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRowForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateRowInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateRowOK creates a UpdateRowOK with default headers values
func NewUpdateRowOK() *UpdateRowOK {
	return &UpdateRowOK{}
}

/*UpdateRowOK handles this case with default header values.

OK
*/
type UpdateRowOK struct {
	Payload *models.RowsResponse
}

func (o *UpdateRowOK) Error() string {
	return fmt.Sprintf("[PUT /v1/keyspaces/{keyspaceName}/tables/{tableName}/rows/{primaryKey}][%d] updateRowOK  %+v", 200, o.Payload)
}

func (o *UpdateRowOK) GetPayload() *models.RowsResponse {
	return o.Payload
}

func (o *UpdateRowOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RowsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRowBadRequest creates a UpdateRowBadRequest with default headers values
func NewUpdateRowBadRequest() *UpdateRowBadRequest {
	return &UpdateRowBadRequest{}
}

/*UpdateRowBadRequest handles this case with default header values.

Bad request
*/
type UpdateRowBadRequest struct {
	Payload *models.Error
}

func (o *UpdateRowBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/keyspaces/{keyspaceName}/tables/{tableName}/rows/{primaryKey}][%d] updateRowBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateRowBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateRowBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRowUnauthorized creates a UpdateRowUnauthorized with default headers values
func NewUpdateRowUnauthorized() *UpdateRowUnauthorized {
	return &UpdateRowUnauthorized{}
}

/*UpdateRowUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateRowUnauthorized struct {
	Payload *models.Error
}

func (o *UpdateRowUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/keyspaces/{keyspaceName}/tables/{tableName}/rows/{primaryKey}][%d] updateRowUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateRowUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateRowUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRowForbidden creates a UpdateRowForbidden with default headers values
func NewUpdateRowForbidden() *UpdateRowForbidden {
	return &UpdateRowForbidden{}
}

/*UpdateRowForbidden handles this case with default header values.

Forbidden
*/
type UpdateRowForbidden struct {
	Payload *models.Error
}

func (o *UpdateRowForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/keyspaces/{keyspaceName}/tables/{tableName}/rows/{primaryKey}][%d] updateRowForbidden  %+v", 403, o.Payload)
}

func (o *UpdateRowForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateRowForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRowInternalServerError creates a UpdateRowInternalServerError with default headers values
func NewUpdateRowInternalServerError() *UpdateRowInternalServerError {
	return &UpdateRowInternalServerError{}
}

/*UpdateRowInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdateRowInternalServerError struct {
	Payload *models.Error
}

func (o *UpdateRowInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/keyspaces/{keyspaceName}/tables/{tableName}/rows/{primaryKey}][%d] updateRowInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateRowInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateRowInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
