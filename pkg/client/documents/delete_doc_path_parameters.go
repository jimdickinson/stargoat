// Code generated by go-swagger; DO NOT EDIT.

package documents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteDocPathParams creates a new DeleteDocPathParams object
// with the default values initialized.
func NewDeleteDocPathParams() *DeleteDocPathParams {
	var ()
	return &DeleteDocPathParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteDocPathParamsWithTimeout creates a new DeleteDocPathParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteDocPathParamsWithTimeout(timeout time.Duration) *DeleteDocPathParams {
	var ()
	return &DeleteDocPathParams{

		timeout: timeout,
	}
}

// NewDeleteDocPathParamsWithContext creates a new DeleteDocPathParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteDocPathParamsWithContext(ctx context.Context) *DeleteDocPathParams {
	var ()
	return &DeleteDocPathParams{

		Context: ctx,
	}
}

// NewDeleteDocPathParamsWithHTTPClient creates a new DeleteDocPathParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteDocPathParamsWithHTTPClient(client *http.Client) *DeleteDocPathParams {
	var ()
	return &DeleteDocPathParams{
		HTTPClient: client,
	}
}

/*DeleteDocPathParams contains all the parameters to send to the API endpoint
for the delete doc path operation typically these are written to a http.Request
*/
type DeleteDocPathParams struct {

	/*XCassandraToken
	  The token returned from the authorization endpoint. Use this token in each request.

	*/
	XCassandraToken string
	/*CollectionID
	  the name of the collection

	*/
	CollectionID string
	/*DocumentID
	  the name of the document

	*/
	DocumentID string
	/*DocumentPath
	  the path in the JSON that you want to retrieve

	*/
	DocumentPath []string
	/*NamespaceID
	  the namespace that the collection is in

	*/
	NamespaceID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete doc path params
func (o *DeleteDocPathParams) WithTimeout(timeout time.Duration) *DeleteDocPathParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete doc path params
func (o *DeleteDocPathParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete doc path params
func (o *DeleteDocPathParams) WithContext(ctx context.Context) *DeleteDocPathParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete doc path params
func (o *DeleteDocPathParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete doc path params
func (o *DeleteDocPathParams) WithHTTPClient(client *http.Client) *DeleteDocPathParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete doc path params
func (o *DeleteDocPathParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXCassandraToken adds the xCassandraToken to the delete doc path params
func (o *DeleteDocPathParams) WithXCassandraToken(xCassandraToken string) *DeleteDocPathParams {
	o.SetXCassandraToken(xCassandraToken)
	return o
}

// SetXCassandraToken adds the xCassandraToken to the delete doc path params
func (o *DeleteDocPathParams) SetXCassandraToken(xCassandraToken string) {
	o.XCassandraToken = xCassandraToken
}

// WithCollectionID adds the collectionID to the delete doc path params
func (o *DeleteDocPathParams) WithCollectionID(collectionID string) *DeleteDocPathParams {
	o.SetCollectionID(collectionID)
	return o
}

// SetCollectionID adds the collectionId to the delete doc path params
func (o *DeleteDocPathParams) SetCollectionID(collectionID string) {
	o.CollectionID = collectionID
}

// WithDocumentID adds the documentID to the delete doc path params
func (o *DeleteDocPathParams) WithDocumentID(documentID string) *DeleteDocPathParams {
	o.SetDocumentID(documentID)
	return o
}

// SetDocumentID adds the documentId to the delete doc path params
func (o *DeleteDocPathParams) SetDocumentID(documentID string) {
	o.DocumentID = documentID
}

// WithDocumentPath adds the documentPath to the delete doc path params
func (o *DeleteDocPathParams) WithDocumentPath(documentPath []string) *DeleteDocPathParams {
	o.SetDocumentPath(documentPath)
	return o
}

// SetDocumentPath adds the documentPath to the delete doc path params
func (o *DeleteDocPathParams) SetDocumentPath(documentPath []string) {
	o.DocumentPath = documentPath
}

// WithNamespaceID adds the namespaceID to the delete doc path params
func (o *DeleteDocPathParams) WithNamespaceID(namespaceID string) *DeleteDocPathParams {
	o.SetNamespaceID(namespaceID)
	return o
}

// SetNamespaceID adds the namespaceId to the delete doc path params
func (o *DeleteDocPathParams) SetNamespaceID(namespaceID string) {
	o.NamespaceID = namespaceID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteDocPathParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-Cassandra-Token
	if err := r.SetHeaderParam("X-Cassandra-Token", o.XCassandraToken); err != nil {
		return err
	}

	// path param collection-id
	if err := r.SetPathParam("collection-id", o.CollectionID); err != nil {
		return err
	}

	// path param document-id
	if err := r.SetPathParam("document-id", o.DocumentID); err != nil {
		return err
	}

	valuesDocumentPath := o.DocumentPath

	joinedDocumentPath := swag.JoinByFormat(valuesDocumentPath, "csv")
	// path array param document-path
	// SetPathParam does not support variadric arguments, since we used JoinByFormat
	// we can send the first item in the array as it's all the items of the previous
	// array joined together
	if len(joinedDocumentPath) > 0 {
		if err := r.SetPathParam("document-path", joinedDocumentPath[0]); err != nil {
			return err
		}
	}

	// path param namespace-id
	if err := r.SetPathParam("namespace-id", o.NamespaceID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
