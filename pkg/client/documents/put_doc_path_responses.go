// Code generated by go-swagger; DO NOT EDIT.

package documents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jimdickinson/stargoat/pkg/models"
)

// PutDocPathReader is a Reader for the PutDocPath structure.
type PutDocPathReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutDocPathReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutDocPathOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutDocPathBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutDocPathUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutDocPathForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutDocPathInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutDocPathOK creates a PutDocPathOK with default headers values
func NewPutDocPathOK() *PutDocPathOK {
	return &PutDocPathOK{}
}

/*PutDocPathOK handles this case with default header values.

OK
*/
type PutDocPathOK struct {
	Payload *models.WriteDocResponse
}

func (o *PutDocPathOK) Error() string {
	return fmt.Sprintf("[PUT /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}/{document-path}][%d] putDocPathOK  %+v", 200, o.Payload)
}

func (o *PutDocPathOK) GetPayload() *models.WriteDocResponse {
	return o.Payload
}

func (o *PutDocPathOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WriteDocResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDocPathBadRequest creates a PutDocPathBadRequest with default headers values
func NewPutDocPathBadRequest() *PutDocPathBadRequest {
	return &PutDocPathBadRequest{}
}

/*PutDocPathBadRequest handles this case with default header values.

Bad request
*/
type PutDocPathBadRequest struct {
}

func (o *PutDocPathBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}/{document-path}][%d] putDocPathBadRequest ", 400)
}

func (o *PutDocPathBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutDocPathUnauthorized creates a PutDocPathUnauthorized with default headers values
func NewPutDocPathUnauthorized() *PutDocPathUnauthorized {
	return &PutDocPathUnauthorized{}
}

/*PutDocPathUnauthorized handles this case with default header values.

Unauthorized
*/
type PutDocPathUnauthorized struct {
}

func (o *PutDocPathUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}/{document-path}][%d] putDocPathUnauthorized ", 401)
}

func (o *PutDocPathUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutDocPathForbidden creates a PutDocPathForbidden with default headers values
func NewPutDocPathForbidden() *PutDocPathForbidden {
	return &PutDocPathForbidden{}
}

/*PutDocPathForbidden handles this case with default header values.

Forbidden
*/
type PutDocPathForbidden struct {
}

func (o *PutDocPathForbidden) Error() string {
	return fmt.Sprintf("[PUT /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}/{document-path}][%d] putDocPathForbidden ", 403)
}

func (o *PutDocPathForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutDocPathInternalServerError creates a PutDocPathInternalServerError with default headers values
func NewPutDocPathInternalServerError() *PutDocPathInternalServerError {
	return &PutDocPathInternalServerError{}
}

/*PutDocPathInternalServerError handles this case with default header values.

Internal Server Error
*/
type PutDocPathInternalServerError struct {
	Payload *models.Error
}

func (o *PutDocPathInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}/{document-path}][%d] putDocPathInternalServerError  %+v", 500, o.Payload)
}

func (o *PutDocPathInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDocPathInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
