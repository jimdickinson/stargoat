// Code generated by go-swagger; DO NOT EDIT.

package documents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jimdickinson/stargoat/pkg/models"
)

// PutDocReader is a Reader for the PutDoc structure.
type PutDocReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutDocReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutDocOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutDocBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutDocUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutDocForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutDocInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutDocOK creates a PutDocOK with default headers values
func NewPutDocOK() *PutDocOK {
	return &PutDocOK{}
}

/*PutDocOK handles this case with default header values.

OK
*/
type PutDocOK struct {
	Payload *models.WriteDocResponse
}

func (o *PutDocOK) Error() string {
	return fmt.Sprintf("[PUT /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}][%d] putDocOK  %+v", 200, o.Payload)
}

func (o *PutDocOK) GetPayload() *models.WriteDocResponse {
	return o.Payload
}

func (o *PutDocOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WriteDocResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDocBadRequest creates a PutDocBadRequest with default headers values
func NewPutDocBadRequest() *PutDocBadRequest {
	return &PutDocBadRequest{}
}

/*PutDocBadRequest handles this case with default header values.

Bad request
*/
type PutDocBadRequest struct {
}

func (o *PutDocBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}][%d] putDocBadRequest ", 400)
}

func (o *PutDocBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutDocUnauthorized creates a PutDocUnauthorized with default headers values
func NewPutDocUnauthorized() *PutDocUnauthorized {
	return &PutDocUnauthorized{}
}

/*PutDocUnauthorized handles this case with default header values.

Unauthorized
*/
type PutDocUnauthorized struct {
}

func (o *PutDocUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}][%d] putDocUnauthorized ", 401)
}

func (o *PutDocUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutDocForbidden creates a PutDocForbidden with default headers values
func NewPutDocForbidden() *PutDocForbidden {
	return &PutDocForbidden{}
}

/*PutDocForbidden handles this case with default header values.

Forbidden
*/
type PutDocForbidden struct {
}

func (o *PutDocForbidden) Error() string {
	return fmt.Sprintf("[PUT /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}][%d] putDocForbidden ", 403)
}

func (o *PutDocForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutDocInternalServerError creates a PutDocInternalServerError with default headers values
func NewPutDocInternalServerError() *PutDocInternalServerError {
	return &PutDocInternalServerError{}
}

/*PutDocInternalServerError handles this case with default header values.

Internal Server Error
*/
type PutDocInternalServerError struct {
	Payload *models.Error
}

func (o *PutDocInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}][%d] putDocInternalServerError  %+v", 500, o.Payload)
}

func (o *PutDocInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDocInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
