// Code generated by go-swagger; DO NOT EDIT.

package documents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchDocParams creates a new SearchDocParams object
// with the default values initialized.
func NewSearchDocParams() *SearchDocParams {
	var (
		pageSizeDefault = int32(1)
		rawDefault      = bool(false)
	)
	return &SearchDocParams{
		PageSize: &pageSizeDefault,
		Raw:      &rawDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewSearchDocParamsWithTimeout creates a new SearchDocParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSearchDocParamsWithTimeout(timeout time.Duration) *SearchDocParams {
	var (
		pageSizeDefault = int32(1)
		rawDefault      = bool(false)
	)
	return &SearchDocParams{
		PageSize: &pageSizeDefault,
		Raw:      &rawDefault,

		timeout: timeout,
	}
}

// NewSearchDocParamsWithContext creates a new SearchDocParams object
// with the default values initialized, and the ability to set a context for a request
func NewSearchDocParamsWithContext(ctx context.Context) *SearchDocParams {
	var (
		pageSizeDefault = int32(1)
		rawDefault      = bool(false)
	)
	return &SearchDocParams{
		PageSize: &pageSizeDefault,
		Raw:      &rawDefault,

		Context: ctx,
	}
}

// NewSearchDocParamsWithHTTPClient creates a new SearchDocParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSearchDocParamsWithHTTPClient(client *http.Client) *SearchDocParams {
	var (
		pageSizeDefault = int32(1)
		rawDefault      = bool(false)
	)
	return &SearchDocParams{
		PageSize:   &pageSizeDefault,
		Raw:        &rawDefault,
		HTTPClient: client,
	}
}

/*SearchDocParams contains all the parameters to send to the API endpoint
for the search doc operation typically these are written to a http.Request
*/
type SearchDocParams struct {

	/*XCassandraToken
	  The token returned from the authorization endpoint. Use this token in each request.

	*/
	XCassandraToken string
	/*CollectionID
	  the name of the collection

	*/
	CollectionID string
	/*Fields
	  the field names that you want to restrict the results to

	*/
	Fields *string
	/*NamespaceID
	  the namespace that the collection is in

	*/
	NamespaceID string
	/*PageSize
	  the max number of documents to return, max 20

	*/
	PageSize *int32
	/*PageState
	  Cassandra page state, used for pagination on consecutive requests

	*/
	PageState *string
	/*Raw
	  Unwrap results

	*/
	Raw *bool
	/*Where
	  a JSON blob with search filters, allowed operators: $eq, $ne, $in, $nin, $gt, $lt, $gte, $lte, $exists

	*/
	Where *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the search doc params
func (o *SearchDocParams) WithTimeout(timeout time.Duration) *SearchDocParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search doc params
func (o *SearchDocParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search doc params
func (o *SearchDocParams) WithContext(ctx context.Context) *SearchDocParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search doc params
func (o *SearchDocParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search doc params
func (o *SearchDocParams) WithHTTPClient(client *http.Client) *SearchDocParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search doc params
func (o *SearchDocParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXCassandraToken adds the xCassandraToken to the search doc params
func (o *SearchDocParams) WithXCassandraToken(xCassandraToken string) *SearchDocParams {
	o.SetXCassandraToken(xCassandraToken)
	return o
}

// SetXCassandraToken adds the xCassandraToken to the search doc params
func (o *SearchDocParams) SetXCassandraToken(xCassandraToken string) {
	o.XCassandraToken = xCassandraToken
}

// WithCollectionID adds the collectionID to the search doc params
func (o *SearchDocParams) WithCollectionID(collectionID string) *SearchDocParams {
	o.SetCollectionID(collectionID)
	return o
}

// SetCollectionID adds the collectionId to the search doc params
func (o *SearchDocParams) SetCollectionID(collectionID string) {
	o.CollectionID = collectionID
}

// WithFields adds the fields to the search doc params
func (o *SearchDocParams) WithFields(fields *string) *SearchDocParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the search doc params
func (o *SearchDocParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithNamespaceID adds the namespaceID to the search doc params
func (o *SearchDocParams) WithNamespaceID(namespaceID string) *SearchDocParams {
	o.SetNamespaceID(namespaceID)
	return o
}

// SetNamespaceID adds the namespaceId to the search doc params
func (o *SearchDocParams) SetNamespaceID(namespaceID string) {
	o.NamespaceID = namespaceID
}

// WithPageSize adds the pageSize to the search doc params
func (o *SearchDocParams) WithPageSize(pageSize *int32) *SearchDocParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the search doc params
func (o *SearchDocParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithPageState adds the pageState to the search doc params
func (o *SearchDocParams) WithPageState(pageState *string) *SearchDocParams {
	o.SetPageState(pageState)
	return o
}

// SetPageState adds the pageState to the search doc params
func (o *SearchDocParams) SetPageState(pageState *string) {
	o.PageState = pageState
}

// WithRaw adds the raw to the search doc params
func (o *SearchDocParams) WithRaw(raw *bool) *SearchDocParams {
	o.SetRaw(raw)
	return o
}

// SetRaw adds the raw to the search doc params
func (o *SearchDocParams) SetRaw(raw *bool) {
	o.Raw = raw
}

// WithWhere adds the where to the search doc params
func (o *SearchDocParams) WithWhere(where *string) *SearchDocParams {
	o.SetWhere(where)
	return o
}

// SetWhere adds the where to the search doc params
func (o *SearchDocParams) SetWhere(where *string) {
	o.Where = where
}

// WriteToRequest writes these params to a swagger request
func (o *SearchDocParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-Cassandra-Token
	if err := r.SetHeaderParam("X-Cassandra-Token", o.XCassandraToken); err != nil {
		return err
	}

	// path param collection-id
	if err := r.SetPathParam("collection-id", o.CollectionID); err != nil {
		return err
	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	// path param namespace-id
	if err := r.SetPathParam("namespace-id", o.NamespaceID); err != nil {
		return err
	}

	if o.PageSize != nil {

		// query param page-size
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page-size", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.PageState != nil {

		// query param page-state
		var qrPageState string
		if o.PageState != nil {
			qrPageState = *o.PageState
		}
		qPageState := qrPageState
		if qPageState != "" {
			if err := r.SetQueryParam("page-state", qPageState); err != nil {
				return err
			}
		}

	}

	if o.Raw != nil {

		// query param raw
		var qrRaw bool
		if o.Raw != nil {
			qrRaw = *o.Raw
		}
		qRaw := swag.FormatBool(qrRaw)
		if qRaw != "" {
			if err := r.SetQueryParam("raw", qRaw); err != nil {
				return err
			}
		}

	}

	if o.Where != nil {

		// query param where
		var qrWhere string
		if o.Where != nil {
			qrWhere = *o.Where
		}
		qWhere := qrWhere
		if qWhere != "" {
			if err := r.SetQueryParam("where", qWhere); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
