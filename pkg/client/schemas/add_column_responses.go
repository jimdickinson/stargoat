// Code generated by go-swagger; DO NOT EDIT.

package schemas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jimdickinson/stargoat/pkg/models"
)

// AddColumnReader is a Reader for the AddColumn structure.
type AddColumnReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddColumnReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewAddColumnCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddColumnBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAddColumnUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddColumnForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewAddColumnConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddColumnInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAddColumnCreated creates a AddColumnCreated with default headers values
func NewAddColumnCreated() *AddColumnCreated {
	return &AddColumnCreated{}
}

/*AddColumnCreated handles this case with default header values.

Created
*/
type AddColumnCreated struct {
	Payload *models.SuccessResponse
}

func (o *AddColumnCreated) Error() string {
	return fmt.Sprintf("[POST /v1/keyspaces/{keyspaceName}/tables/{tableName}/columns][%d] addColumnCreated  %+v", 201, o.Payload)
}

func (o *AddColumnCreated) GetPayload() *models.SuccessResponse {
	return o.Payload
}

func (o *AddColumnCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddColumnBadRequest creates a AddColumnBadRequest with default headers values
func NewAddColumnBadRequest() *AddColumnBadRequest {
	return &AddColumnBadRequest{}
}

/*AddColumnBadRequest handles this case with default header values.

Bad request
*/
type AddColumnBadRequest struct {
	Payload *models.Error
}

func (o *AddColumnBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/keyspaces/{keyspaceName}/tables/{tableName}/columns][%d] addColumnBadRequest  %+v", 400, o.Payload)
}

func (o *AddColumnBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddColumnBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddColumnUnauthorized creates a AddColumnUnauthorized with default headers values
func NewAddColumnUnauthorized() *AddColumnUnauthorized {
	return &AddColumnUnauthorized{}
}

/*AddColumnUnauthorized handles this case with default header values.

Unauthorized
*/
type AddColumnUnauthorized struct {
	Payload *models.Error
}

func (o *AddColumnUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/keyspaces/{keyspaceName}/tables/{tableName}/columns][%d] addColumnUnauthorized  %+v", 401, o.Payload)
}

func (o *AddColumnUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddColumnUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddColumnForbidden creates a AddColumnForbidden with default headers values
func NewAddColumnForbidden() *AddColumnForbidden {
	return &AddColumnForbidden{}
}

/*AddColumnForbidden handles this case with default header values.

Forbidden
*/
type AddColumnForbidden struct {
	Payload *models.Error
}

func (o *AddColumnForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/keyspaces/{keyspaceName}/tables/{tableName}/columns][%d] addColumnForbidden  %+v", 403, o.Payload)
}

func (o *AddColumnForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddColumnForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddColumnConflict creates a AddColumnConflict with default headers values
func NewAddColumnConflict() *AddColumnConflict {
	return &AddColumnConflict{}
}

/*AddColumnConflict handles this case with default header values.

Conflict
*/
type AddColumnConflict struct {
	Payload *models.Error
}

func (o *AddColumnConflict) Error() string {
	return fmt.Sprintf("[POST /v1/keyspaces/{keyspaceName}/tables/{tableName}/columns][%d] addColumnConflict  %+v", 409, o.Payload)
}

func (o *AddColumnConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddColumnConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddColumnInternalServerError creates a AddColumnInternalServerError with default headers values
func NewAddColumnInternalServerError() *AddColumnInternalServerError {
	return &AddColumnInternalServerError{}
}

/*AddColumnInternalServerError handles this case with default header values.

Internal Server Error
*/
type AddColumnInternalServerError struct {
	Payload *models.Error
}

func (o *AddColumnInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/keyspaces/{keyspaceName}/tables/{tableName}/columns][%d] addColumnInternalServerError  %+v", 500, o.Payload)
}

func (o *AddColumnInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddColumnInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
