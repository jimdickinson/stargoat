// Code generated by go-swagger; DO NOT EDIT.

package schemas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jimdickinson/stargoat/pkg/models"
)

// CreateColumnReader is a Reader for the CreateColumn structure.
type CreateColumnReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateColumnReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateColumnCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateColumnBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateColumnUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateColumnConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateColumnInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateColumnCreated creates a CreateColumnCreated with default headers values
func NewCreateColumnCreated() *CreateColumnCreated {
	return &CreateColumnCreated{}
}

/*CreateColumnCreated handles this case with default header values.

Created
*/
type CreateColumnCreated struct {
	Payload map[string]interface{}
}

func (o *CreateColumnCreated) Error() string {
	return fmt.Sprintf("[POST /v2/schemas/keyspaces/{keyspaceName}/tables/{tableName}/columns][%d] createColumnCreated  %+v", 201, o.Payload)
}

func (o *CreateColumnCreated) GetPayload() map[string]interface{} {
	return o.Payload
}

func (o *CreateColumnCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateColumnBadRequest creates a CreateColumnBadRequest with default headers values
func NewCreateColumnBadRequest() *CreateColumnBadRequest {
	return &CreateColumnBadRequest{}
}

/*CreateColumnBadRequest handles this case with default header values.

Bad Request
*/
type CreateColumnBadRequest struct {
	Payload *models.Error
}

func (o *CreateColumnBadRequest) Error() string {
	return fmt.Sprintf("[POST /v2/schemas/keyspaces/{keyspaceName}/tables/{tableName}/columns][%d] createColumnBadRequest  %+v", 400, o.Payload)
}

func (o *CreateColumnBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateColumnBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateColumnUnauthorized creates a CreateColumnUnauthorized with default headers values
func NewCreateColumnUnauthorized() *CreateColumnUnauthorized {
	return &CreateColumnUnauthorized{}
}

/*CreateColumnUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateColumnUnauthorized struct {
	Payload *models.Error
}

func (o *CreateColumnUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v2/schemas/keyspaces/{keyspaceName}/tables/{tableName}/columns][%d] createColumnUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateColumnUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateColumnUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateColumnConflict creates a CreateColumnConflict with default headers values
func NewCreateColumnConflict() *CreateColumnConflict {
	return &CreateColumnConflict{}
}

/*CreateColumnConflict handles this case with default header values.

Conflict
*/
type CreateColumnConflict struct {
	Payload *models.Error
}

func (o *CreateColumnConflict) Error() string {
	return fmt.Sprintf("[POST /v2/schemas/keyspaces/{keyspaceName}/tables/{tableName}/columns][%d] createColumnConflict  %+v", 409, o.Payload)
}

func (o *CreateColumnConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateColumnConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateColumnInternalServerError creates a CreateColumnInternalServerError with default headers values
func NewCreateColumnInternalServerError() *CreateColumnInternalServerError {
	return &CreateColumnInternalServerError{}
}

/*CreateColumnInternalServerError handles this case with default header values.

Internal server error
*/
type CreateColumnInternalServerError struct {
	Payload *models.Error
}

func (o *CreateColumnInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v2/schemas/keyspaces/{keyspaceName}/tables/{tableName}/columns][%d] createColumnInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateColumnInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateColumnInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
