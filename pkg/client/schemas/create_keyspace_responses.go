// Code generated by go-swagger; DO NOT EDIT.

package schemas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jimdickinson/stargoat/pkg/models"
)

// CreateKeyspaceReader is a Reader for the CreateKeyspace structure.
type CreateKeyspaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateKeyspaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateKeyspaceCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateKeyspaceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateKeyspaceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateKeyspaceConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateKeyspaceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateKeyspaceCreated creates a CreateKeyspaceCreated with default headers values
func NewCreateKeyspaceCreated() *CreateKeyspaceCreated {
	return &CreateKeyspaceCreated{}
}

/*CreateKeyspaceCreated handles this case with default header values.

Created
*/
type CreateKeyspaceCreated struct {
	Payload map[string]interface{}
}

func (o *CreateKeyspaceCreated) Error() string {
	return fmt.Sprintf("[POST /v2/schemas/keyspaces][%d] createKeyspaceCreated  %+v", 201, o.Payload)
}

func (o *CreateKeyspaceCreated) GetPayload() map[string]interface{} {
	return o.Payload
}

func (o *CreateKeyspaceCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateKeyspaceBadRequest creates a CreateKeyspaceBadRequest with default headers values
func NewCreateKeyspaceBadRequest() *CreateKeyspaceBadRequest {
	return &CreateKeyspaceBadRequest{}
}

/*CreateKeyspaceBadRequest handles this case with default header values.

Bad Request
*/
type CreateKeyspaceBadRequest struct {
	Payload *models.Error
}

func (o *CreateKeyspaceBadRequest) Error() string {
	return fmt.Sprintf("[POST /v2/schemas/keyspaces][%d] createKeyspaceBadRequest  %+v", 400, o.Payload)
}

func (o *CreateKeyspaceBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateKeyspaceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateKeyspaceUnauthorized creates a CreateKeyspaceUnauthorized with default headers values
func NewCreateKeyspaceUnauthorized() *CreateKeyspaceUnauthorized {
	return &CreateKeyspaceUnauthorized{}
}

/*CreateKeyspaceUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateKeyspaceUnauthorized struct {
	Payload *models.Error
}

func (o *CreateKeyspaceUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v2/schemas/keyspaces][%d] createKeyspaceUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateKeyspaceUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateKeyspaceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateKeyspaceConflict creates a CreateKeyspaceConflict with default headers values
func NewCreateKeyspaceConflict() *CreateKeyspaceConflict {
	return &CreateKeyspaceConflict{}
}

/*CreateKeyspaceConflict handles this case with default header values.

Conflict
*/
type CreateKeyspaceConflict struct {
	Payload *models.Error
}

func (o *CreateKeyspaceConflict) Error() string {
	return fmt.Sprintf("[POST /v2/schemas/keyspaces][%d] createKeyspaceConflict  %+v", 409, o.Payload)
}

func (o *CreateKeyspaceConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateKeyspaceConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateKeyspaceInternalServerError creates a CreateKeyspaceInternalServerError with default headers values
func NewCreateKeyspaceInternalServerError() *CreateKeyspaceInternalServerError {
	return &CreateKeyspaceInternalServerError{}
}

/*CreateKeyspaceInternalServerError handles this case with default header values.

Internal server error
*/
type CreateKeyspaceInternalServerError struct {
	Payload *models.Error
}

func (o *CreateKeyspaceInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v2/schemas/keyspaces][%d] createKeyspaceInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateKeyspaceInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateKeyspaceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
