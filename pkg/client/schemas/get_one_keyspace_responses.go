// Code generated by go-swagger; DO NOT EDIT.

package schemas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jimdickinson/stargoat/pkg/models"
)

// GetOneKeyspaceReader is a Reader for the GetOneKeyspace structure.
type GetOneKeyspaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOneKeyspaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOneKeyspaceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetOneKeyspaceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetOneKeyspaceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOneKeyspaceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOneKeyspaceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOneKeyspaceOK creates a GetOneKeyspaceOK with default headers values
func NewGetOneKeyspaceOK() *GetOneKeyspaceOK {
	return &GetOneKeyspaceOK{}
}

/*GetOneKeyspaceOK handles this case with default header values.

OK
*/
type GetOneKeyspaceOK struct {
	Payload *models.Keyspace
}

func (o *GetOneKeyspaceOK) Error() string {
	return fmt.Sprintf("[GET /v2/schemas/keyspaces/{keyspaceName}][%d] getOneKeyspaceOK  %+v", 200, o.Payload)
}

func (o *GetOneKeyspaceOK) GetPayload() *models.Keyspace {
	return o.Payload
}

func (o *GetOneKeyspaceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Keyspace)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOneKeyspaceBadRequest creates a GetOneKeyspaceBadRequest with default headers values
func NewGetOneKeyspaceBadRequest() *GetOneKeyspaceBadRequest {
	return &GetOneKeyspaceBadRequest{}
}

/*GetOneKeyspaceBadRequest handles this case with default header values.

Bad Request
*/
type GetOneKeyspaceBadRequest struct {
	Payload *models.Error
}

func (o *GetOneKeyspaceBadRequest) Error() string {
	return fmt.Sprintf("[GET /v2/schemas/keyspaces/{keyspaceName}][%d] getOneKeyspaceBadRequest  %+v", 400, o.Payload)
}

func (o *GetOneKeyspaceBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOneKeyspaceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOneKeyspaceUnauthorized creates a GetOneKeyspaceUnauthorized with default headers values
func NewGetOneKeyspaceUnauthorized() *GetOneKeyspaceUnauthorized {
	return &GetOneKeyspaceUnauthorized{}
}

/*GetOneKeyspaceUnauthorized handles this case with default header values.

Unauthorized
*/
type GetOneKeyspaceUnauthorized struct {
	Payload *models.Error
}

func (o *GetOneKeyspaceUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v2/schemas/keyspaces/{keyspaceName}][%d] getOneKeyspaceUnauthorized  %+v", 401, o.Payload)
}

func (o *GetOneKeyspaceUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOneKeyspaceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOneKeyspaceNotFound creates a GetOneKeyspaceNotFound with default headers values
func NewGetOneKeyspaceNotFound() *GetOneKeyspaceNotFound {
	return &GetOneKeyspaceNotFound{}
}

/*GetOneKeyspaceNotFound handles this case with default header values.

Not Found
*/
type GetOneKeyspaceNotFound struct {
	Payload *models.Error
}

func (o *GetOneKeyspaceNotFound) Error() string {
	return fmt.Sprintf("[GET /v2/schemas/keyspaces/{keyspaceName}][%d] getOneKeyspaceNotFound  %+v", 404, o.Payload)
}

func (o *GetOneKeyspaceNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOneKeyspaceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOneKeyspaceInternalServerError creates a GetOneKeyspaceInternalServerError with default headers values
func NewGetOneKeyspaceInternalServerError() *GetOneKeyspaceInternalServerError {
	return &GetOneKeyspaceInternalServerError{}
}

/*GetOneKeyspaceInternalServerError handles this case with default header values.

Internal server error
*/
type GetOneKeyspaceInternalServerError struct {
	Payload *models.Error
}

func (o *GetOneKeyspaceInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v2/schemas/keyspaces/{keyspaceName}][%d] getOneKeyspaceInternalServerError  %+v", 500, o.Payload)
}

func (o *GetOneKeyspaceInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOneKeyspaceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
