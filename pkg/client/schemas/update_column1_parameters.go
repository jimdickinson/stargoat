// Code generated by go-swagger; DO NOT EDIT.

package schemas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/jimdickinson/stargoat/pkg/models"
)

// NewUpdateColumn1Params creates a new UpdateColumn1Params object
// with the default values initialized.
func NewUpdateColumn1Params() *UpdateColumn1Params {
	var ()
	return &UpdateColumn1Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateColumn1ParamsWithTimeout creates a new UpdateColumn1Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateColumn1ParamsWithTimeout(timeout time.Duration) *UpdateColumn1Params {
	var ()
	return &UpdateColumn1Params{

		timeout: timeout,
	}
}

// NewUpdateColumn1ParamsWithContext creates a new UpdateColumn1Params object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateColumn1ParamsWithContext(ctx context.Context) *UpdateColumn1Params {
	var ()
	return &UpdateColumn1Params{

		Context: ctx,
	}
}

// NewUpdateColumn1ParamsWithHTTPClient creates a new UpdateColumn1Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateColumn1ParamsWithHTTPClient(client *http.Client) *UpdateColumn1Params {
	var ()
	return &UpdateColumn1Params{
		HTTPClient: client,
	}
}

/*UpdateColumn1Params contains all the parameters to send to the API endpoint
for the update column 1 operation typically these are written to a http.Request
*/
type UpdateColumn1Params struct {

	/*XCassandraToken
	  The token returned from the authorization endpoint. Use this token in each request.

	*/
	XCassandraToken string
	/*Body*/
	Body *models.ColumnDefinition
	/*ColumnName*/
	ColumnName string
	/*KeyspaceName
	  Name of the keyspace to use for the request.

	*/
	KeyspaceName string
	/*TableName
	  Name of the table to use for the request.

	*/
	TableName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update column 1 params
func (o *UpdateColumn1Params) WithTimeout(timeout time.Duration) *UpdateColumn1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update column 1 params
func (o *UpdateColumn1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update column 1 params
func (o *UpdateColumn1Params) WithContext(ctx context.Context) *UpdateColumn1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update column 1 params
func (o *UpdateColumn1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update column 1 params
func (o *UpdateColumn1Params) WithHTTPClient(client *http.Client) *UpdateColumn1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update column 1 params
func (o *UpdateColumn1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXCassandraToken adds the xCassandraToken to the update column 1 params
func (o *UpdateColumn1Params) WithXCassandraToken(xCassandraToken string) *UpdateColumn1Params {
	o.SetXCassandraToken(xCassandraToken)
	return o
}

// SetXCassandraToken adds the xCassandraToken to the update column 1 params
func (o *UpdateColumn1Params) SetXCassandraToken(xCassandraToken string) {
	o.XCassandraToken = xCassandraToken
}

// WithBody adds the body to the update column 1 params
func (o *UpdateColumn1Params) WithBody(body *models.ColumnDefinition) *UpdateColumn1Params {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update column 1 params
func (o *UpdateColumn1Params) SetBody(body *models.ColumnDefinition) {
	o.Body = body
}

// WithColumnName adds the columnName to the update column 1 params
func (o *UpdateColumn1Params) WithColumnName(columnName string) *UpdateColumn1Params {
	o.SetColumnName(columnName)
	return o
}

// SetColumnName adds the columnName to the update column 1 params
func (o *UpdateColumn1Params) SetColumnName(columnName string) {
	o.ColumnName = columnName
}

// WithKeyspaceName adds the keyspaceName to the update column 1 params
func (o *UpdateColumn1Params) WithKeyspaceName(keyspaceName string) *UpdateColumn1Params {
	o.SetKeyspaceName(keyspaceName)
	return o
}

// SetKeyspaceName adds the keyspaceName to the update column 1 params
func (o *UpdateColumn1Params) SetKeyspaceName(keyspaceName string) {
	o.KeyspaceName = keyspaceName
}

// WithTableName adds the tableName to the update column 1 params
func (o *UpdateColumn1Params) WithTableName(tableName string) *UpdateColumn1Params {
	o.SetTableName(tableName)
	return o
}

// SetTableName adds the tableName to the update column 1 params
func (o *UpdateColumn1Params) SetTableName(tableName string) {
	o.TableName = tableName
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateColumn1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-Cassandra-Token
	if err := r.SetHeaderParam("X-Cassandra-Token", o.XCassandraToken); err != nil {
		return err
	}

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param columnName
	if err := r.SetPathParam("columnName", o.ColumnName); err != nil {
		return err
	}

	// path param keyspaceName
	if err := r.SetPathParam("keyspaceName", o.KeyspaceName); err != nil {
		return err
	}

	// path param tableName
	if err := r.SetPathParam("tableName", o.TableName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
