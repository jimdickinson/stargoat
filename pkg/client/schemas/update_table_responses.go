// Code generated by go-swagger; DO NOT EDIT.

package schemas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jimdickinson/stargoat/pkg/models"
)

// UpdateTableReader is a Reader for the UpdateTable structure.
type UpdateTableReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateTableReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateTableOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateTableBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateTableUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateTableNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateTableConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateTableInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateTableOK creates a UpdateTableOK with default headers values
func NewUpdateTableOK() *UpdateTableOK {
	return &UpdateTableOK{}
}

/*UpdateTableOK handles this case with default header values.

resource updated
*/
type UpdateTableOK struct {
	Payload map[string]interface{}
}

func (o *UpdateTableOK) Error() string {
	return fmt.Sprintf("[PUT /v2/schemas/keyspaces/{keyspaceName}/tables/{tableName}][%d] updateTableOK  %+v", 200, o.Payload)
}

func (o *UpdateTableOK) GetPayload() map[string]interface{} {
	return o.Payload
}

func (o *UpdateTableOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTableBadRequest creates a UpdateTableBadRequest with default headers values
func NewUpdateTableBadRequest() *UpdateTableBadRequest {
	return &UpdateTableBadRequest{}
}

/*UpdateTableBadRequest handles this case with default header values.

Bad Request
*/
type UpdateTableBadRequest struct {
	Payload *models.Error
}

func (o *UpdateTableBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v2/schemas/keyspaces/{keyspaceName}/tables/{tableName}][%d] updateTableBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateTableBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateTableBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTableUnauthorized creates a UpdateTableUnauthorized with default headers values
func NewUpdateTableUnauthorized() *UpdateTableUnauthorized {
	return &UpdateTableUnauthorized{}
}

/*UpdateTableUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateTableUnauthorized struct {
	Payload *models.Error
}

func (o *UpdateTableUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v2/schemas/keyspaces/{keyspaceName}/tables/{tableName}][%d] updateTableUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateTableUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateTableUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTableNotFound creates a UpdateTableNotFound with default headers values
func NewUpdateTableNotFound() *UpdateTableNotFound {
	return &UpdateTableNotFound{}
}

/*UpdateTableNotFound handles this case with default header values.

Not Found
*/
type UpdateTableNotFound struct {
	Payload *models.Error
}

func (o *UpdateTableNotFound) Error() string {
	return fmt.Sprintf("[PUT /v2/schemas/keyspaces/{keyspaceName}/tables/{tableName}][%d] updateTableNotFound  %+v", 404, o.Payload)
}

func (o *UpdateTableNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateTableNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTableConflict creates a UpdateTableConflict with default headers values
func NewUpdateTableConflict() *UpdateTableConflict {
	return &UpdateTableConflict{}
}

/*UpdateTableConflict handles this case with default header values.

Conflict
*/
type UpdateTableConflict struct {
	Payload *models.Error
}

func (o *UpdateTableConflict) Error() string {
	return fmt.Sprintf("[PUT /v2/schemas/keyspaces/{keyspaceName}/tables/{tableName}][%d] updateTableConflict  %+v", 409, o.Payload)
}

func (o *UpdateTableConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateTableConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTableInternalServerError creates a UpdateTableInternalServerError with default headers values
func NewUpdateTableInternalServerError() *UpdateTableInternalServerError {
	return &UpdateTableInternalServerError{}
}

/*UpdateTableInternalServerError handles this case with default header values.

Internal server error
*/
type UpdateTableInternalServerError struct {
	Payload *models.Error
}

func (o *UpdateTableInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v2/schemas/keyspaces/{keyspaceName}/tables/{tableName}][%d] updateTableInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateTableInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateTableInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
