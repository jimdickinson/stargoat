// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Filter filter
//
// swagger:model Filter
type Filter struct {

	// The column name to apply the filter to.
	ColumnName string `json:"columnName,omitempty"`

	// The comparison operator to use in the filter.
	// Enum: [eq notEq gt gte lt lte in]
	Operator string `json:"operator,omitempty"`

	// An array of values to use in the filter. The full array will only be used for the `in` operation, for all others only the first element will be considered.
	Value []interface{} `json:"value"`
}

// Validate validates this filter
func (m *Filter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var filterTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["eq","notEq","gt","gte","lt","lte","in"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		filterTypeOperatorPropEnum = append(filterTypeOperatorPropEnum, v)
	}
}

const (

	// FilterOperatorEq captures enum value "eq"
	FilterOperatorEq string = "eq"

	// FilterOperatorNotEq captures enum value "notEq"
	FilterOperatorNotEq string = "notEq"

	// FilterOperatorGt captures enum value "gt"
	FilterOperatorGt string = "gt"

	// FilterOperatorGte captures enum value "gte"
	FilterOperatorGte string = "gte"

	// FilterOperatorLt captures enum value "lt"
	FilterOperatorLt string = "lt"

	// FilterOperatorLte captures enum value "lte"
	FilterOperatorLte string = "lte"

	// FilterOperatorIn captures enum value "in"
	FilterOperatorIn string = "in"
)

// prop value enum
func (m *Filter) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, filterTypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Filter) validateOperator(formats strfmt.Registry) error {

	if swag.IsZero(m.Operator) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Filter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Filter) UnmarshalBinary(b []byte) error {
	var res Filter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
