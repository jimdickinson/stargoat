// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TableAdd table add
//
// swagger:model TableAdd
type TableAdd struct {

	// Definition of columns that belong to the table to be added.
	// Required: true
	ColumnDefinitions []*ColumnDefinition `json:"columnDefinitions"`

	// Determines whether to create a new table if a table with the same name exists. Attempting to create an existing table returns an error unless this option is true.
	IfNotExists bool `json:"ifNotExists,omitempty"`

	// The name of the table to add.
	// Required: true
	Name *string `json:"name"`

	// The primary key definition of the table, consisting of partition and clustering keys.
	// Required: true
	PrimaryKey *PrimaryKey `json:"primaryKey"`

	// The set of table options to apply to the table when creating.
	TableOptions *TableOptions `json:"tableOptions,omitempty"`
}

// Validate validates this table add
func (m *TableAdd) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColumnDefinitions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTableOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TableAdd) validateColumnDefinitions(formats strfmt.Registry) error {

	if err := validate.Required("columnDefinitions", "body", m.ColumnDefinitions); err != nil {
		return err
	}

	for i := 0; i < len(m.ColumnDefinitions); i++ {
		if swag.IsZero(m.ColumnDefinitions[i]) { // not required
			continue
		}

		if m.ColumnDefinitions[i] != nil {
			if err := m.ColumnDefinitions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("columnDefinitions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TableAdd) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *TableAdd) validatePrimaryKey(formats strfmt.Registry) error {

	if err := validate.Required("primaryKey", "body", m.PrimaryKey); err != nil {
		return err
	}

	if m.PrimaryKey != nil {
		if err := m.PrimaryKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primaryKey")
			}
			return err
		}
	}

	return nil
}

func (m *TableAdd) validateTableOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.TableOptions) { // not required
		return nil
	}

	if m.TableOptions != nil {
		if err := m.TableOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tableOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TableAdd) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TableAdd) UnmarshalBinary(b []byte) error {
	var res TableAdd
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
