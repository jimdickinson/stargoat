// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TableOptions table options
//
// swagger:model TableOptions
type TableOptions struct {

	// Order rows storage to make use of the on-disk sorting of columns. Specifying order can make query results more efficient.
	ClusteringExpression []*ClusteringExpression `json:"clusteringExpression"`

	// Defines the Time To Live (TTL), which determines the time period (in seconds) to expire data. If the value is >0, TTL is enabled for the entire table and an expiration timestamp is added to each column. The maximum value is 630720000 (20 years). A new TTL timestamp is calculated each time the data is updated and the row is removed after the data expires.
	DefaultTimeToLive int32 `json:"defaultTimeToLive,omitempty"`
}

// Validate validates this table options
func (m *TableOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusteringExpression(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TableOptions) validateClusteringExpression(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusteringExpression) { // not required
		return nil
	}

	for i := 0; i < len(m.ClusteringExpression); i++ {
		if swag.IsZero(m.ClusteringExpression[i]) { // not required
			continue
		}

		if m.ClusteringExpression[i] != nil {
			if err := m.ClusteringExpression[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusteringExpression" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TableOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TableOptions) UnmarshalBinary(b []byte) error {
	var res TableOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
